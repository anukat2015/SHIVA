<!DOCTYPE html>
<html>
<head>
	<link REL="SHORTCUT ICON" HREF="UVALogo.ico">
	<title>SHIVA Map maker</title>
	<link rel="stylesheet" type="text/css" href="css/smoothness/jquery-ui-1.8.16.custom.css">
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"></script>
	<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
 	<script type="text/javascript" src="SHIVA_Show.js"></script>
	<style type="text/css">
		body { font-family:Verdana,Geneva,sans-serif; font-size:xx-small; }
		p.pb { text-align:right; color:#999999; }
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:80px;border-radius:8px;}
		tr.odd { background-color:#e0e0e0; }
		.propTable { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:80px;border-radius:8px;
				  	 background-color:#eee;border:1px solid #ccc;
				  	 background:-moz-linear-gradient(top,#f0f0f0,#dfdfdf);
				  	 background:-webkit-linear-gradient(top, #f0f0f0 0%, #dfdfdf 100%);
				  	 }
	</style>
</head>
<body>
	<div id="containerDiv" style="width:600px;height:400px;position:absolute;top:0px;left:308px"> ... Loading map ...</div>
	<div style="width:279px;position:absolute;top:0px;left:0px">
	    <table id="propertyTable" class="propTable" cellspacing="0" cellpadding="0" width="278">
			<tr height='8'><td></td></tr>
		</table> 
	   <p align='right'><span id="toolbar" style="font-size:medium" >
			<button type='button' id='tb1' onclick='ShiftItem(-1)'/></button>
			<button type='button' id='tb2' onclick='ShiftItem(1)'></button>
			<button type='button' id='tb3' onclick='RemoveItem()'/></button>
			<button type='button' id='tb4' onclick='AddNewItem()'></button>
		</span></p>
		<p align="right"><img src='annotate.gif' style='vertical-align:bottom' onclick='shivaLib.Annotate()'>&nbsp;&nbsp;&nbsp;Share as: 
		<select id='formatter' onChange='SaveData(this.value)'>
				<option>Choose format</option>
				<option>WordPress</option>
				<option>eStore</option>
				<option>iFrame</option>
				<option>JSON</option>
				<option>Web-page</option>
				<option>KML</option>
			</select> 
		</p>		
		<div id="helpDiv"/>
	</div>
	<div id="outputDiv" style="width:460px"></div>
	<div id="dialogDiv"></div>
<script>

///////// GLOBALS   //////////

	var items=new Array();
	var curAtt=null;
	var shivaLib=null;
	var shivaGroup="Map"
	var oldEventListener=null;
	var projection=null;
	
	var props={
		mapcenter: 					{	def:'38.03,-78.48,11', opt:'string',		des:'Center and zoom of map'}, 
		draggable: 					{	def:'true', 		opt:'true|false',		des:'Draggable?'}, 
		height: 					{	def:'400', 			opt:'number',		 	des:'Height of map'}, 
		width: 						{	def:'600', 			opt:'number',		 	des:'Width of map'}, 
		mapTypeId: 					{	def:'Roadmap', 		opt:'Hybrid|Roadmap|Satellite|Terrain|Land', 	des:'Initial map type'}, 
		scrollwheel: 				{	def:'true', 		opt:'true|false',		des:'Enable scrollwheeel?'}, 
		overviewMapControl: 		{	def:'false', 		opt:'true|false',		des:'Overview inset control?'}, 
		panControl: 				{	def:'false', 		opt:'true|false',		des:'Position control?'}, 
		streetViewControl: 			{	def:'false', 		opt:'true|false',		des:'Show StreetView icon?'}, 
		mapTypeControl: 			{	def:'true', 		opt:'true|false',		des:'Map type control?'}, 
		zoomControl: 				{	def:'true', 		opt:'true|false',		des:'Zoom control?'}, 
		controlbox: 				{	def:'false', 		opt:'true|false',		des:'Show controlbox?'}, 
		ud: 						{	def:'false', 		opt:'true|false',		des:'Enable user draw?'}, 
		item: 						{	def:'None', 		opt:'None|',			des:'<b>Choose layer to edit</b>'}, 
		layerTitle: 				{	def:'', 			opt:'string',		 	des:'Layer title'}, 
		layerSource: 				{	def:'', 			opt:'string',		 	des:'Layer source'}, 
		layerOptions: 				{	def:'', 			opt:'string',		 	des:'Layer options'}, 
		visible:					{	def:'true', 		opt:'true|false',		des:'Layer visibility'}, 
		layerType: 					{	def:'KML', 			opt:'KML|Marker|Overlay',des:'Layer type'} 
		}
		
	var helpText=new Array();
	helpText['Center and zoom of map']="This sets the center of the map and its zoom factor. The 3 items are separated by commas, (i.e. 38.03,-78.48,11). <br><br>The easist way to set this to navigate the map to the view you want to set, and click in the center of the map. The coordinates will be printed below the map. Copy and paste the numbers into the text box to set it.<br/><br/><b>Hint:</b> Triple-clicking the number will select all 3 coordinates.";
	helpText['Draggable?']="Whether the map can be can navigated by dragging with a mouse.";
	helpText['Initial map type']="The type of map that opens initially. Can be hybrid, Roadmap, Satellite, or Terrain.  More information on map types can be found at <a href='http://code.google.com/apis/maps/documentation/staticmaps/#MapTypes' target='_blank'> here</a>.";
	helpText['Height of map']="The height of the map in pixels."; 
	helpText['Width of map']="The width of the map in pixels."; 
	helpText['Enable scrollwheeel?']="Enable the mouse scrollwheel to zoom the map.";
	helpText['Overview inset control?']="Whether the map has am inset overview in the bottom right-hand corner.";
	helpText['Position control?']="Whether the map has a pan and zoom control.";
	helpText['Show StreetView icon?']="Whether the map has a street view icon.";
	helpText['Map type control?']="Whether the map has a menu to set the type of map to view.";
	helpText['Zoom control?']="Whether the map has a zoom control.";
	helpText['<b>Choose layer to edit</b>']="This option lets you layer another map on top of the google map (users can layer a historical map over the google map), add a marker to your map (users can add any number of markers to the map with rollover titles), or add a KML layer.  Select the layer to edit in this pull-down, or click on the layer in the map to bring up its attributes.<br><br>To add a new layer choose None from this pull-down menu.  Set the layer source, options, visibility and type.  Then click the Add new layer button below.<br><br>To remove a layer choose said layer from the pull-down menu, then click the Remove this layer button below.";
	helpText['Layer source']="The URL address of the KML layer data. For Markers and Overlays, you can specify the data here directly:<br/><br/>For Markers, type in the lon, lat, and rollover title (i.e., 38.03,-78.48,My Marker). You can display any .png file as an icon by specifying its URL as the 4th setting after the title.<br/><br> For KML GeoRSS feeds. put the URL in the field: (i.e., http://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml)";
	helpText['Layer options']="Options to set various layer settings. For Overlays, the top-left and bottom-right coordinates are entered, separated by comma (i.e., 40.716216,-74.213393,40.765641,-74.139235). Remember to center the map over it to be able to see it. For Markers, this is an advanced option. You can find out more information <a href='http://code.google.com/apis/maps/documentation/javascript/reference.html#KmlLayer' target='_blank'> here</a>.";	
	helpText['Layer type']="Type of layer on map.<br/><br/><b>KML</b> will allow you to place a KML file as an overlay.<br/><b>Marker</b> will ass a marker icon at a particular location.<br/><b>Overlay</b> will allow you to overlay an image by specifying the corners and a URL as the source.";	
	helpText['Layer visibility']="Whether the layer will be shown.";	
	helpText['OVERVIEW']="The SHIVA Map tool lets you embed a Google Maps image on your web page without requiring JavaScript or any dynamic page loading. The Google Static Map service creates your map based on URL parameters sent through a standard HTTP request and returns the map as an image you can display on your web page.<br/><br/>";
	helpText['OVERVIEW']+="To use SHIVA Map tools, find the center point of your map by using the zoom and pan features of the SHIVA map. The map will automatically load centered on Charlottesville. When you have located the center point of your map, triple click on it. Right below the SHIVA map the coordinates for your center point will be displayed.  Copy and paste them into the Center and zoom of map text box.<br/><br/>";
	helpText['OVERVIEW']+="Customize your chart with the options available.<br/><br/>"
	helpText['OVERVIEW']+="The layers tool allows you to add KML layers, markers and/or overlays to your map.<br/><br/>";
	helpText['OVERVIEW']+="KML is a file format used to display geographic data in an earth browser, such as Google Earth, Google Maps, and Google Maps for mobile. A KML file is processed in much the same way that HTML (and XML) files are processed by web browsers. Like HTML, KML has a tag-based structure with names and attributes used for specific display purposes, Markers or Overlays to your map.<br/><br/>";
	helpText['OVERVIEW']+="Markers are like pins that you place on your map. A marker can have information or links attached to them that can be viewed when a user clicks on or hovers their mouse over a marker.<br/><br/>";
	helpText['OVERVIEW']+="Overlays are objects on the map that are tied to latitude/longitude coordinates, so they move when you drag or zoom the map. Overlays reflect objects that you 'add' to the map to designate points, lines, or areas.<br/><br/>";
	helpText['OVERVIEW']+="To add layers to your map click the '+' button below the attributes box.  A box will open allowing you to customize your layers.";
	helpText['Enable user draw?']="Setting this to true will allow users to add annotations to the display.";

///////// INIT  /////////////

    $(document).ready(function() {
		$("#toolbar").buttonset();
		$("#tb1").button({text: false, icons: { primary: "ui-icon-arrowthick-1-n"}}).css("width","25");
		$("#tb2").button({text: false, icons: { primary: "ui-icon-arrowthick-1-s"}}).css("width","25");
		$("#tb3").button({text: false, icons: { primary: "ui-icon-trash"}}).css("width","25");
		$("#tb4").button({text: false, icons: { primary: "ui-icon-plus"}}).css("width","25");
		shivaLib=new SHIVA_Show("containerDiv");
		shivaLib.drupalMan=(""+window.location).match(/pr=d/);
	  	shivaLib.SetAttributes(props,items,false);
		ReEdit();
		Draw();
		ShowHelp("startup");
		if (window.addEventListener) 
			window.addEventListener("message",shivaEventHandler,false);
		else
			window.attachEvent("message",shivaEventHandler);
	});

	function shivaEventHandler(e)
	{
		if (e.data.indexOf("GetJSON") == 0) 
			e.source.postMessage("GetJSON="+SaveData("GetJSON"),"*");
		else if (e.data.indexOf("GetWebPage") == 0) 
			e.source.postMessage("GetWebPage="+SaveData("Web-page"),"*");
		else if (e.data.indexOf("GetWordPress") == 0) 
			e.source.postMessage("GetWordPress="+SaveData("WordPress"),"*");
		else if (e.data.indexOf("GetType") == 0) 
			e.source.postMessage("GetType="+shivaGroup,"*");
		else if (e.data.indexOf("PutJSON") == 0) 
			ReEdit($.parseJSON(e.data.substr(8)));
		if (shivaLib.drupalMan)	shivaLib.drupalMan=e.source;
	}
 
	function ProjectionHelperOverlay(map)
	{ 
	    google.maps.OverlayView.call(this); 
	    this.setMap(map); 
	} 
	ProjectionHelperOverlay.prototype=new google.maps.OverlayView(); 
	ProjectionHelperOverlay.prototype.draw=function() {};
 
	function Draw()
	{	
		if ((shivaLib.drupalMan) && (typeof(shivaLib.drupalMan.postMessage) == "function")) 
			shivaLib.drupalMan.postMessage("DataChanged=true","*");
		shivaLib.Draw($.parseJSON(SaveData("GetJSON")));
		if (shivaLib.map) {
			projection=new ProjectionHelperOverlay(shivaLib.map);
			if (oldEventListener)
				google.maps.event.removeListener(oldEventListener);
			oldEventListener=google.maps.event.addListener(shivaLib.map,'click',function(e) {
				var latlon=e.latLng.lat()+","+e.latLng.lng()+","+shivaLib.map.getZoom();
				var str="<b>Clicked spot </b>(latitude, longitude, zoom):<br/><br/>"+latlon;
				str+="<br/><br/>Click <a href='javascript:CenterMap("+latlon+")'>here</a> to set as map's center";
				$('#helpDiv').html(str);
				});
			}
	}

	function CenterMap(lon,lat,zoom)
	{
		$("#propInput0").val(lon+","+lat+","+zoom);
		Draw();	
	}

	function MakeKML()
	{
		var o,i,j,a;
		var p=new google.maps.Point(0,0);
		var proj=projection.getProjection();
		var str="<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n<Document>\n"; 
		for (i=0;i<shivaLib.overlay.length;++i) {									// For each seg
			o=shivaLib.overlay[i];													// Point at it
			a=Math.round(o.alpha*2.55).toString(16);								// Get alpha
			if (a.length == 1)														// If single digit
				a="0"+a;															// Pad 
			if (o.type < 3) {														// Geometric shapes
				str+="<Placemark>\n";												// Placemark
				str+="\t<Style id=\"sty"+i+"\">\n";									// Style
				str+="\t\t<LineStyle>\n\t\t\t<color>";								// Color start
				if (o.edgeColor == -1)												// If no color
					str+="00000000";												// No alpha
				else
					str+=a+o.edgeColor.substring(5,7)+o.edgeColor.substring(3,5)+o.edgeColor.substring(1,3);	// ABGR		
				str+="</color>\n";													// Color end
				str+="\t\t\t<width>"+(Math.round(o.edgeWidth/10)+1)+"</width>\n\t\t</LineStyle>\n";	// Width 
				str+="\t\t<PolyStyle>\n\t\t\t<color>";								// Color start
				if (o.color == -1)													// If no color
					str+="00000000";												// No alpha
				else
					str+=a+o.color.substring(5,7)+o.color.substring(3,5)+o.color.substring(1,3);	// ABGR		
				str+="</color>\n\t\t</PolyStyle>\n";								// Color/poly end
				str+="\t</Style>\n\t<styleUrl>sty"+i+"</styleUrl>\n";				// Style URL
				if (o.color == -1)													// If no fill
					str+="\t<LineString><coordinates>\n";							// Line
				else																// fill
					str+="\t<Polygon><outerBoundaryIs><LinearRing><coordinates>\n";	// Polygon
				if (o.type == 0) {													// Lines/polygons
					for (j=0;j<o.x.length;++j) {									// For each point
						p.x=o.x[j];			p.y=o.y[j];								// Get coord		
						str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
						}
					if (o.color != -1) {											// If a polygon
						p.x=o.x[0];			p.y=o.y[0];								// Complete it					
						str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
						}
					}
				else if (o.type == 1) {												// Circles
					var r=Math.abs(o.x[1]-o.x[0]);									// Radius
					for (j=0;j<=360;j+=10) {										// 18 segs
						p.x=(Math.cos(j*.0174532925)*r)+o.x[0];						// Get x
						p.y=(Math.sin(j*.0174532925)*r)+o.y[0];						// Y
						str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
						}	
					}
				else if (o.type == 2) {												// Boxes
					p.x=o.x[0];			p.y=o.y[0];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[1];			p.y=o.y[0];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[1];			p.y=o.y[1];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[0];			p.y=o.y[1];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[0];			p.y=o.y[0];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					}
				if (o.color == -1)													// If no fill
					str+="\t</coordinates></LineString>\n";							// Line
				else																// fill
					str+="\t</coordinates></LinearRing></outerBoundaryIs></Polygon>\n";
				str+="</Placemark>\n";												// End placemark
				}	
			if (o.type == 4) {														// Image
				str+="<GroundOverlay>\n";											// Overlay
//				str+="\t<LookAt>\n";												// Look at
//				str+="\t\t<latitude>" +shivaLib.map.getCenter().lat()+"</latitude>\n"; 	// Lat
//				str+="\t\t<longitude>"+shivaLib.map.getCenter().lng()+"</longitude>\n"; // Lon
//				str+="\t</LookAt>\n";												// /Look at
				str+="\t<Icon>\n\t\t<href>"+o.imageURL+"</href>\n\t</Icon>\n";		// Image
				p.x=o.x[0];			p.y=o.y[0];										// Corner 1
				str+="\t\t<LatLonBox>\n";											// Coords
				str+="\t\t<north>"+proj.fromContainerPixelToLatLng(p).lat()+"</north>\n"; // N
				str+="\t\t<west>" +proj.fromContainerPixelToLatLng(p).lng()+"</west>\n";  // W
				p.x=o.x[1];			p.y=o.y[1];										// Corner 2
				str+="\t\t<south>"+proj.fromContainerPixelToLatLng(p).lat()+"</south>\n"; // S
				str+="\t\t<east>" +proj.fromContainerPixelToLatLng(p).lng()+"</east>\n";  // E
				str+="\t</LatLonBox>\n";											// /Coords
				str+="</GroundOverlay>\n";											// /Overlay
				}
			}
		str+="</Document>\n</kml>";
		return str;
	}

	function SaveData(mode)
	{
		if (mode == "KML") {
			$('#formatter').val(0)
			$("#outputDiv").html("<br/><br/>Embed code:<br><textarea readonly='yes' rows='6' cols='60' id='tmptxt1'>"+MakeKML()+"</textarea>");
			$("#tmptxt1").select();
			}
		else return shivaLib.SaveData(mode,shivaGroup,items,props);
	}	

	function ReEdit(jsonData)
	{
		var it=shivaLib.ReEdit(jsonData,props);
		if (it)
			items=it;
	  	shivaLib.SetAttributes(props,items,true);
		Draw();
	}	

	function ShowHelp(att)
	{
		if (att == "startup") 
			$("#helpDiv").html("<br/><p class='pb'>Powered by Google&trade;<br/><br/>Built by SHANTI<br/>The University of Virginia</p>");
		else
			shivaLib.ShowHelp(att,helpText);
	}	
			
///////// ITEMS  /////////////
	
	function AddNewItem()
	{
		var o=new Object;
		var s=0,i=0;
		shivaLib.Sound("ding");
		for (var key in props) {
			if (key == "item")
				s=i;
			++i;
			if (!s)
				continue;
			o[key]=props[key].def;
			}
		items.push(o);
		for (var i=0;i<items.length;++i)
			items[i].name="Layer-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		Draw();
		$("#accord").accordion({ active: items.length-1 });
	}	
	
	function RemoveItem()
	{
		var active=$("#accord").accordion("option","active");
		if (active === false)
			return;
		shivaLib.Sound("delete");
		items.splice(active,1);
		for (var i=0;i<items.length;++i) 
			items[i].name="Layer-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		Draw();
	}

	function ShiftItem(dir)
	{
		var cur=shivaLib.ShiftItem(dir,items);
		for (var i=0;i<items.length;++i) 
			items[i].name="Layer-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		if (cur != -1)
			$("#accord").accordion({ active: cur });
	}

	function trace(str) { console.log(str) };
	
	
</script>
</body></html>