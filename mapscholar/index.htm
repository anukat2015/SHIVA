
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="mapscholaricon.ico">
	<title>MapScholar</title>
	<link rel="stylesheet" type="text/css" href="http://www.viseyes.org/shiva/css/smoothness/jquery-ui-1.8.16.custom.css">
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.9.1/jquery-ui.min.js"></script>
	<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
 	<script type="text/javascript" src='https://www.google.com/jsapi?autoload={"modules":[{"name":"earth","version":"1"}]}'></script>
 	<script type="text/javascript" src="http://www.viseyes.org/shiva/SHIVA_Show.js"></script>
 	<script type="text/javascript" src="MapScholar_Draw.js"></script>
	<style type="text/css">
		body { font-family:Verdana,Geneva,sans-serif; font-size:xx-small}
		p.pb { text-align:right; color:#fff; }
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		.chapterbar { -moz-border-radius:3px;-webkit-border-radius:3px;-khtml-border-radius:3px;border-radius:4px;width:192px;background-color:#999;height:14px;padding:3px;color:#fff}
		.headerbar { border-bottom:1px solid #999;height:14px;width:192px;padding:3px;color:#333}
		tr.odd { background-color:#e0e0e0; }
		.propTable { background-color:#eee;border-radius:8px;
				  	 background:-moz-linear-gradient(top,#f0f0f0,#dfdfdf);
				  	 background:-webkit-linear-gradient(top, #f0f0f0 0%, #dfdfdf 100%);
				  	 border-collapse: collapse;
				  	 }
	</style>
</head>
<body>
		<div id="containerDiv" style="position:absolute;width:800px;height:600px;left:20px;top:20px;"></div>
		<div id="shelfDiv" style="position:absolute;width:230px;height:636px;left:820px;top:20px;background-color:#eee;"> </div>
		<div id="controlBarDiv" style="position:absolute;width:800px;height:36px;top:620px;left:20px;background-color:#eee"> </div>
<script>

	var mps=null;
	var shivaLib=null;
	var geocoder=geocoder=new google.maps.Geocoder();
	
	function shivaEventHandler(e) {}
 
	function ShivaPostInit()
 	{
		mps.dr.InitEvents();
		mps.AddMapBoxes();		
	}
	
     $(document).ready(function() {
		mps=new MapScholar();
		if (window.addEventListener) 
			window.addEventListener("message",shivaEventHandler,false);
		else
			window.attachEvent("message",shivaEventHandler);	
		
		$(function() {
		    $("#address").autocomplete({
		      source: function(request, response) {
		        geocoder.geocode( {'address': request.term }, function(results, status) {
		          response($.map(results, function(item) {
		            return {
		              label:  item.formatted_address,
		              value: item.formatted_address,
		              latitude: item.geometry.location.lat(),
		              longitude: item.geometry.location.lng()
		            }
		          }));
		        })
		      },
	     	select: function(event, ui) {
				var lookAt=shivaLib.map.getView().copyAsLookAt(shivaLib.map.ALTITUDE_RELATIVE_TO_GROUND);
				shivaLib.options.mapcenter=(Math.floor(ui.item.latitude*1000)/1000+","+Math.floor(ui.item.longitude*1000)/1000);
				shivaLib.Draw(shivaLib.options);
		      	}
		    });
  		});

	});


//////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN 
/////////////////////////////////////////////////////////////////////////////////////////////////

function MapScholar()													// CONSTRUCTOR
{
	mps=this;																// Point to this
	this.showBoxes=true;													// Show boxes
	shivaLib=new SHIVA_Show("containerDiv");								// Alloc SHIVA_Show
	shivaLib.options={ 	shivaGroup:"Earth", height:"600", width:"800", 
 						mapcenter:"29.36,-80.49", range:"1000000", tilt:"42", heading:"0",
 						panControl:"true", draggable:"true", scrollwheel:"true", overviewMapControl:"false",
 						terrainexag:"1", borders:"false", roads:"false"
 						};
	
	this.InitProjectData();													// Init project data
	shivaLib.Draw(shivaLib.options);										// Draw map
	this.dr=new MapScholar_Draw();											// Alloc draw module
	this.sh=new MapScholar_Shelf();											// Alloc shelf module
	this.dr.DrawControlBar(false);											// Draw control bar and shelf
}	

MapScholar.prototype.InitProjectData=function()							// INIT PROJECT DATA
{
/*	
 
  atlas[
			name, desc, id, author
			type (tour|collection)
			mids[]
			]
		mobs[
			title, desc, id, dur, author
			small, med, large, kml
			status (open|closed|flyto)
			type (map|layer|goto|chapter|header)
			start, end, tags, citation
			north, south, east, west, rotation
			]            

*/
			
	var o,i,j,v;
	this.atlas=new Array();													// Holds atlas data
	this.mobs=new Array();													// Holds map objects data

	var atlas={ type:"collection",		
				name:"Florida Maps",
				desc:"This is a collection of florida maps",
				mids:[],
				id:0
				};
	this.AddNewAtlas(atlas);

	var mobs=shivaLib.GetTextFile("default.txt");							// Load data
	mobs.replace(/\n\r/g,"\n");												// \n\r -> \n
	mobs.replace(/\r\n/g,"\n");												// \r\n -> \n
	mobs.replace(/\r/g,"");													// Remove \r's
	mobs=mobs.split("\n");													// Split into rows
	var fields=mobs[0].split("\t");											// Get field names
	for (i=1;i<mobs.length;++i) {											// For each row
		o={};																// Fresh object
		v=mobs[i].split("\t");												// Split into fields
		if (v.length < 4)													// Not enough fields
			continue;														// Skip it
		for (j=0;j<=fields.length;++j)										// For each field 
			if ((fields[j]) && (fields[j].length > 1))						// If a real field
				o[fields[j]]=v[j];											// Set it
		this.mobs.push(o);													// Add new mob to project
		this.AddMobToAtlas(this.atlas[0].id,this.mobs[i-1].id);				// Add to atlas
		}
}

MapScholar.prototype.AddNewAtlas=function(atlas)						// ADD NEW ATLAS TO PROJECT
{
	atlas.id=""+Math.floor(Math.random()*999999999999);						// Make random id #
	this.atlas.push($.extend(true,{},atlas));								// Copy new atlas to project
}

MapScholar.prototype.AddNewMob=function(mob)							// ADD NEW MAP OBJECT TO PROJECT
{
	this.mobs.push($.extend(true,{},mob));									// Copy new mob  to project
}

MapScholar.prototype.AddMobToAtlas=function(atlasID, mobID, num)		// ADD MOB ID TO ATLAS
{
	var aNum;
	if ((aNum=this.FindAtlasByID(atlasID)) == -1)							// Get index
		return false;														// Return if none
	if (num == undefined)													// If num not spec'd
		num=this.atlas[aNum].mids.length;									// Add to end
	this.atlas[aNum].mids.splice(num,0,mobID);								// Add mob id to atlas
}

MapScholar.prototype.ShiftMob=function(aNum, from, to)					// SHIFT MAP OBJECT IN ATLAS
{
	var mob=this.atlas[aNum].mobs.splice(from,1);							// Remove it from old loc
	if (to != -1)															// If not deleting
		this.atlas[aNum].mobs.splice(to,0,mob);								// Move it to new loc
}

MapScholar.prototype.FindAtlasByID=function(id)							// FIND ATLAS INDEX BY ID
{
	var i;
	for (i=0;i<this.atlas.length;++i)										// For each atlas
		if (id == this.atlas[i].id)											// If matched
			return i;														// Return index
	return -1;																// Not found
}

MapScholar.prototype.FindMobByID=function(id)							// FIND MAP OBJECT INDEX BY ID
{
	var i;
	for (i=0;i<this.mobs.length;++i)										// For each mob
		if (id == this.mobs[i].id)											// If matched
			return i;														// Return index
	return -1;																// Not found
}

MapScholar.prototype.AddMapBoxes=function()								// ADD MAP WIREFRAMES
{
	var i,coords,seg,m,sty,a=30000;
	var ge=shivaLib.map;													// Point to earth												
    var folder=ge.createFolder("wireframes");								// Create folder
    ge.getFeatures().appendChild(folder);									// Add folder to EDOM
 	for (i=0;i<this.mobs.length;++i) {										// For each seg
		m=this.mobs[i];														// Point at mob
		if (m.type != "map")												// If not a map
			continue;														// Continue
		m.gid="WIRE-"+Math.floor(Math.random()*99999999);					// Make random #
		coords=ge.createLineString('');										// Holds coords
		seg=ge.createPlacemark(m.gid);										// Create holder
		seg.setStyleSelector(ge.createStyle(''));							// Create style
		seg.setGeometry(coords);											// Set coords in seg
		folder.getFeatures().appendChild(seg);								// Add seg to folder
		coords.getCoordinates().pushLatLngAlt(m.north-0,m.west-0,a);		// Add point
		coords.getCoordinates().pushLatLngAlt(m.north-0,m.east-0,a);		// Add point
		coords.getCoordinates().pushLatLngAlt(m.south-0,m.east-0,a);		// Add point
		coords.getCoordinates().pushLatLngAlt(m.south-0,m.west-0,a);		// Add point
		coords.getCoordinates().pushLatLngAlt(m.north-0,m.west-0,a);		// Add point
		sty=seg.getStyleSelector().getLineStyle();							// Get line style
		sty.setWidth(1);													// Set width	
		sty.getColor().set("ff00ffff");  									// Set color in aabbggrr format
		coords.setAltitudeMode(ge.ALTITUDE_RELATIVE_TO_GROUND);				// Relative to ground level
		}
}

MapScholar.prototype.ShowMapBoxes=function(num, mode)					// HIDE/SHOW WIREFRAMES
{
	var i,seg,m,sty;
	var ge=shivaLib.map;													// Point to earth												
	var start=num,end=num-0+1;												// Assume one
	if (num < 0)															// If doing all
		start=0,end=this.mobs.length;										// Whole list
	for (i=start;i<end;++i) {												// For each seg
		m=this.mobs[i];														// Point at mob
		if (m.type != "map")												// If not a map
			continue;														// Continue
		seg=ge.getElementById(m.gid);										// Get object
		sty=seg.getStyleSelector().getLineStyle();							// Get line style
		if (mode == "off")													// If off
			sty.setWidth(0);												// Set width off	
		else																// Show it
			sty.setWidth(1);												// Set width	
		if (mode == "select")												// If selecting
			sty.getColor().set("ff0000ff");  								// Red
		else																// Regular
			sty.getColor().set("ff00ffff");  								// Yellow
		}
}

MapScholar.prototype.ClickHandler=function(e)							// HANDLE CLICKS TO EARTH
{
	var i;
	var id=e.getTarget().getId();											// Find id
	if (id.indexOf("WIRE-") == 0) {											// If a wireframe
	if (!e.getShiftKey()) {													// If multiselecting
		mps.ShowMapBoxes(-1,"on");											// Reset all
		for (i=0;i<mps.sh.mobVis.length;++i)								// For each mob
			mps.sh.mobVis[i]=0;												// Make it hidden                                       
		}
	for (i=0;i<mps.mobs.length;++i) {										// For each seg
		if (id == mps.mobs[i].gid) {										// A match
			shivaLib.Sound("click");										// Click
			if (mps.sh.mobVis[i] < 50)										// If invisible
				mps.sh.mobVis[i]=100;										// Show it
			else															// If visible
				mps.sh.mobVis[i]=0;											// Show it
			mps.sh.FillShelf();												// Redraw shelf
			mps.ShowMapBoxes(i,"select");									// Highlight box
			}	
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////
// SHELF 
/////////////////////////////////////////////////////////////////////////////////////////////////

function MapScholar_Shelf()												// CONSTRUCTOR
{
	this.curAtlas=0;														// Default to all
	this.curMob=-1;															// Default to none
    this.expandAll=true;													// Expand/collapse button status
    this.mobVis=new Array();                                                // Holds hide/show status
}

MapScholar_Shelf.prototype.Draw=function()								  // DRAW SHELF
{
	var i;
	var str="<p>";
	str+="&nbsp;&nbsp;<img src='img/annotate.gif' style='vertical-align:bottom' title='Annotate' onclick='mps.dr.DrawControlBar(true)'>";		
	str+="<label>&nbsp; Location: </label ><input size='20' id='address' style='font-size:x-small' type='text'/>";
	str+="&nbsp;&nbsp; <input type='checkbox' checked='checked'  style='vertical-align:middle' id='wireframes'>Show boxes?";		
	$("#controlBarDiv").html(str+"</p>");                                    // Add to DOM
	str="<div id='contentShelf' style='width:216px;top:24px;height:586px;background-color:#eee;margin:0px;padding:6px;overflow-x:hidden;overflow-y:scroll;border:1px solid #ccc;'/>";
	str+="<p>&nbsp; <img id='expandAll' src='img/";						// image base
	if (this.expandAll)														// If expand
		str+="expand2.gif'> Expand all</p>";								// Expand all button
	else																	// Collaspe
		str+="collapse2.gif'> Collapse all</p>";							// Collapse all button
	$("#shelfDiv").html(str+"</table></div>");								// Add div
	var n=mps.atlas[this.curAtlas].mids.length;								// Number of mobs to add
	this.mobVis=[];															// Remove old array
	for (i=0;i<n;++i)														// For each mob
		this.mobVis.push(0);												// Make it hidden                                       
		this.FillShelf();													// Draw shelf
	
	$("#wireframes").click(function(e) {								// SHOW BOXES?
		shivaLib.Sound("click");											// Click
		mps.showBoxes=e.target.checked;										// Set var
		if (e.target.checked)												// If checked
			mps.ShowMapBoxes(-1,"on");										// Show them
		else																// If unchecked
			mps.ShowMapBoxes(-1,"off");										// Hide
		});
	
	$("#expandAll").click(function(e) {									// EXPAND/COLLAPSE ALL
		shivaLib.Sound("click");											// Click
		mps.sh.ToggleExpandCollapse();										// Expand or collapse
		});

}

MapScholar_Shelf.prototype.ToggleExpandCollapse=function()				// EXPAND/COLLAPSE ALL
{
	var i,o,n;
	this.expandAll=!this.expandAll;											// Toggle state
	var n=mps.atlas[this.curAtlas].mids.length;                             // Number of mobs to add
	for (i=0;i<n;++i) {                                                     // For each mob
		o=mps.mobs[mps.FindMobByID(mps.atlas[this.curAtlas].mids[i])];      // Point at mob
		if ((o.type == "chapter") || (o.type == "header")) 					// A header													
			o.status=this.expandAll?"closed":"open";						// Set status
		this.Draw();														// Draw shelf
	}
}

MapScholar_Shelf.prototype.FillShelf=function()							// FILL SHELF
{
	var i,o,pic;
	var n=mps.atlas[this.curAtlas].mids.length;                             // Number of mobs to add
	str="<table cellspacing='0'>";                                          // Table start
	for (i=0;i<n;++i) {                                                     // For each mob
		o=mps.mobs[mps.FindMobByID(mps.atlas[this.curAtlas].mids[i])];      // Point at mob
		if ((o.type == "chapter") || (o.type == "header")) {				// A header													
			str+="<tr valign='top' height='36'><td colspan='2'><div class='"+o.type+"bar'>"; // Start
			str+="<img id='mob"+i+"' src='img/";							// Img base
			if (o.status == "closed")										// If open
				str+="expand";												// Expand
			else															// If closed
				str+="collapse";											// Collapse
			if (o.type == "header")											// If a header
				str+="2";													// Use dark icons
			str+=".gif'><b>"+o.title+"</div>";								// Title
			str+="</td><tr>";												// End 
			if ((o.desc)&& (o.status != "closed"))							// If a description
				str+="<tr><td colspan='2'><i>"+o.desc+"</i><br/><br/></td></tr>";	// Add it
			if (o.status == "closed")	{									// If closed
				var type=o.type;											// Search type
				for (j=i+1;j<n;++j) {										// For each mob
					o=mps.mobs[mps.FindMobByID(mps.atlas[this.curAtlas].mids[j])];   // Point at mob
					if (o.type == type)										// If a match
						break;												// Quit
					if ((type == "header") && (o.type == "chapter"))		// Quit on chapter if a header
						break;												// Quit
					}
				i=j-1;														// Set next index
				}
			continue;
			}
		if (o.type == "map") { 												// A map													
			if (o.small)                                                    // If a small defined															
				pic=o.small;												// Use it
			else if (o.med)													// Else if a med defined															
				pic=o.med;													// Use it
			else if (o.large)												// Else if a large defined															
			pic=o.med;														// Use it
			}
		else if (o.type == "layer") {										// A layer													
			if (o.small)													// If a thumb defined                                                           
				pic=o.small;												// Use it
			else															// Use icon
				pic="img/layericon.png";									// Set
			}
		else if (o.type == "goto")											// A goto													
			pic="img/gotoicon.png";											// Use icon
		str+="<tr id='mob"+i+"'";											// Row start
		if (this.mobVis[i] > 0) 											// If visible
			str+="' style='background-color:#ddddff'";						// Color background
		str+="><td valign='top' width='70'><img "; 							// Img start								
			if (o.type == "map")											// If a map                                                    
            str+=" style='border: 1px solid #999' ";						// Add border
		str+=" width='64' src='"+pic+"'>&nbsp;&nbsp;</td>";					// Add pic
		str+="<td valign='top'><b>"+o.title+"</b><br/>";					// Add title
		if (o.desc)															// If desc spec'd
			str+=o.desc+"<br/>";											// Add desc
		str+="<br/></td></tr>";												// Close entry
		if ((this.curMob == i) && (this.mobVis[i] > 0) && (o.type != "goto")){	// If selected and visible
			str+="<tr style='background-color:#ddddff'><td valign='top' style='color:#009900' align='center'><b>Visibility</b></td><td>";
			str+="<div id='mobVis' style='width:70%;display:inline-block'></div>";		// Add div for vis
			str+="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img width='11' id='mobInfo' src='img/infobutton.gif'/><br/><br/></td></tr>";
			str+="<tr><td colspan='2' id='mobCite'></td></tr>";
			}
		}
	$("#contentShelf").html("</table>"+str);								// Add mobs
	if (this.curMob != -1) {												// If a current
		$("#visControl").show();											// Show it
		$("#mobVis").val(this.mobVis[this.curMob]);							// Set value
		}
	for (i=0;i<n;++i) {														// For each mob
		$("#mob"+i).click( function(e) {									// Add click handler
			shivaLib.Sound("click");										// Click
			var id=this.id.substr(3);										// Get id
			mps.sh.curMob=id;												// Set curmob
			var o=mps.mobs[mps.FindMobByID(mps.atlas[mps.sh.curAtlas].mids[id])];      // Point at mob
			if (o.status == "open")			o.status="closed";				// If open, close
			else if (o.status == "closed")	o.status="open";				// If closed, open
			if (!e.shiftKey) {												// If not setting multiples
				for (j=0;j<n;++j)											// For each mob
					if (j != mps.sh.curMob)									// If not this one
						mps.sh.mobVis[j]=0;									// Hide mob
				if (mps.showBoxes)											// If showing boxes
					mps.ShowMapBoxes(-1,"on");								// Reset boxes
				}
			if (mps.sh.mobVis[id] < 50)										// If off
				mps.sh.mobVis[id]=100;										// Turn it on
			else															// If on
				mps.sh.mobVis[id]=0;										// Turn it off
			mps.sh.FillShelf();												// Redraw shelf
			if (mps.showBoxes)												// If showing boxes
				mps.ShowMapBoxes(id,"select");								// Highlight box
			});
		}
 
	$("#mobInfo").click( function(e) {									// CLICK ON INFO BUTTON
		shivaLib.Sound("click");											// Click
		var o=mps.mobs[mps.FindMobByID(mps.atlas[mps.sh.curAtlas].mids[mps.sh.curMob])];	// Point at mob
		if ($("#mobCite").html()) {											// If something there already
			$("#mobCite").html("");											// Clear it
			$("#mobCite").css("padding","0px");								// No padding
			}
		else{																// Nothing there yet
			var str="<hr/><b>";
			str+=o.type.substr(0,1).toUpperCase()+o.type.substr(1)+" ";		// Set type
			str+=o.id+"</b>";												// Add map id
			if (o.start) {													// If a start set
				str+="&nbsp;&nbsp;&nbsp;("+o.start;							// Add it
				if (o.end)													// If an end set
					str+=" - "+o.end;										// Add it
				str+=")";													// Close date paren
				}
			if (o.citation)													// If a citation set
				str+="<br/>"+o.citation;									// Add it
			$("#mobCite").html(str);										// Set text
			$("#mobCite").css("background-color","#ddddff");				// Color
			$("#mobCite").css("padding","6px");								// Add padding
			}
		});

	if ((this.curMob != -1) && (this.mobVis[this.curMob] > 0)) {			// If selected and visible
		var val=this.mobVis[this.curMob];									// Get def
		var ops={ min:0, max:100, value:val,								// Slider options
			slide:function(event,ui) {										// Slide cb
				mps.sh.mobVis[mps.sh.curMob]=ui.value;						// Set vis factor
				}
			}    
		$("#mobVis" ).slider(ops);											// Init slider
		}
}
	


</script>
</body>
</html>

