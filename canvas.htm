<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="UVALogo.ico">
	<title>SHIVA Canvas editor</title>
	<link rel="stylesheet" type="text/css" href="css/smoothness/jquery-ui-1.8.16.custom.css">
	<link type="text/css" rel="stylesheet" href="css/timeline1.css" media="all" id="timelineCSS"/> 
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"></script>
	<script type="text/javascript" src='//www.google.com/jsapi?autoload={"modules":[{"name":"visualization","version":"1"}]}'></script>
 	<script type="text/javascript" src="//maps.googleapis.com/maps/api/js?sensor=false"></script>
	<script type="text/javascript" src="shivalib-min.js"></script>
	<script type="text/javascript" src="SHIVA_Event.js"></script>
	<script type="text/javascript" src="canvas.js"></script>
	<style type="text/css">
		body { font-family:Verdana,Geneva,sans-serif; font-size:xx-small; }
		p.pb { text-align:right; color:#999; }
		.sm { font-size:x-small;color:#000; }
		tr.odd { background-color:#f0f0f0; }
		#containerDiv-frame > div.containerDiv { padding: 10px; }
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		.propTable { background-color:#eee;border-radius:8px;
				  	 background:-moz-linear-gradient(top,#f0f0f0,#dfdfdf);
				  	 background:-webkit-linear-gradient(top, #f0f0f0 0%, #dfdfdf 100%);
				  	 border-collapse: collapse;
				  	 width:278px;
				  	 }
		.linkButton { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;
				  	 background-color:#eee;border:1px solid #ccc;
				  	 background:-webkit-linear-gradient(top, #ddd 0%, #bbb 100%);
				  	 }

	</style>
</head>
<body>
	<div style="width:279px;text-align:center"> 
		<span id="toolbar" style="font-size:xx-small">
		<input type='radio' id='tb1' onclick='SetMode(0)' name='mainMen' checked='checked' /><label for='tb1'>Set</label>
		<input type='radio' id='tb2' onclick='SetMode(1)' name='mainMen'/><label for='tb2'>Link</label>
		<input type='radio' id='tb3' onclick='SetMode(2)' name='mainMen'/><label for='tb3'>View</label></span>
		<br/><br/>
	    <div id="editDiv" style="text-align:left">
		    <table id="propertyTable" class='propTable'>
				<tr style="height:8px"><td> </td></tr>
			</table> 
		<p style="text-align:right">
			<img src='annotate.gif' style='vertical-align:bottom' alt='Annotate' onclick='shivaLib.Annotate()'>
			<span id='saveAsDiv'></span>
		</p>		
	</div>
	<div id="canvasDiv" style="position:absolute;"> </div>
 	<div id="outputDiv" style="width:460px;"> </div>
	</div>

<script>


///////// GLOBALS   //////////

	var items=new Array();
	var selectedItems=new Array();
	var shivaGroup="Canvas"
	var shivaLib=null;
	var helpText=new Array();
	var curMode=0;

///////// INIT  /////////////

    $(document).ready(function() {
		shivaLib=new SHIVA_Show("canvasDiv");
		shivaLib.cvs=new SHIVA_Canvas();
		shivaLib.cvs.elements=shivaLib.cvs.elements;
		shivaLib.drupalMan=(""+window.location).match(/pr=d/);

//shivaLib.cvs.elements=$.parseJSON(shivaLib.GetTextFile("elements.txt"));
//for (var i=0;i<shivaLib.cvs.elements.length;++i) AddElement(i);	
//SetDataChanged(false);

		selectedItems.push(-1);
		$("#toolbar").buttonset();
		$("#tb1").button({text: true, icons: { primary: "ui-icon-gear"}});
		$("#tb2").button({text: true, icons: { primary: "ui-icon-shuffle"}});
		$("#tb3").button({text: true, icons: { primary: "ui-icon-image"}});
		ReEdit();
		ShowHelp("startup");
 		$("body").keyup(onKeyUp)
  		if (window.addEventListener)  
			window.addEventListener("message",shivaEventHandler,false);
		else
			window.attachEvent("message",shivaEventHandler);
		if (!shivaLib.drupalMan) {
			var str="&nbsp;&nbsp;Share as: <select id='formatter' onChange='SaveData(this.value)'>";
			str+="<option>Choose format</option>";
			str+="<option>eStore</option>";
			str+="<option>JSON</option>";
			str+="</select>"; 
			$("#saveAsDiv").html(str);
			}
	 });

	function SetDataChanged(mode)
	{
		if (shivaLib.drupalMan)
			window.parent.postMessage("DataChanged="+mode.toString());
		else if (!shivaLib.drupalMan) {
			if (window.parent)
				if (window.parent.ShivaDataChanged)
					window.parent.ShivaDataChanged(mode);
			}
	} 

	function shivaEventHandler(e)
	{
		if (e.data.indexOf("ShivaTrigger") == 0) {
			var v=e.data.substr(13).split(",");
			shivaLib.cvs.ActionResponse(v[0],v[1],v[2]);
			return true;
			}
		else if (e.data.indexOf("ShivaDraw") == 0) {
			if (shivaLib.qe) {
				items[shivaLib.qe.num].query=$("#curQueryDiv").text();
				SetActionAttributes(shivaLib.qe.num);
				ShowElements();
				}
			return true;
			}
		else if (e.data.indexOf("GetJSON") == 0) 
			e.source.postMessage("GetJSON="+SaveData("GetJSON"),"*");
		else if (e.data.indexOf("GetType") == 0) 
			e.source.postMessage("GetType=Visualization","*");
		else if (e.data.indexOf("PutJSON") == 0) {
			shivaLib.cvs.elements=[];
			items=[];
			var o=$.parseJSON(e.data.substring(8));
			for (key in o) {
				if (key.match("Element-"))
					shivaLib.cvs.elements.push(o[key]);
				else if (key.match("Action-"))
					items.push(o[key]);
				}
			for (var i=0;i<shivaLib.cvs.elements.length;++i) 
				AddElement(i);	
			Draw();
			}
		}

	function ShivaMessage(tab, id, cmd) 
	{
	    if (cmd.indexOf("OpenTab") == 0) {
	   		window.parent.OpenTab(tab);
	   		return;
	   		}
	   	window.parent.document.getElementById(id).contentWindow.postMessage(cmd,"*");
 	}

	function SetMode(toolNum) 
	{
	 	$("#tb"+(toolNum+1)).attr("checked","checked");
		curMode=toolNum;
	   	shivaLib.Sound("click");
		if (toolNum == 2)
			$("#editDiv").hide();
		else
			$("#editDiv").show();
		Draw();
	}

	function ShowElements()
	{
		var str;
		$('#propertyTable tr:gt(0)').remove();
		str="<tr><td colspan='4' align='center'><b>";
		if (curMode == 0) 		str+="ELEMENTS</b></td></tr>";
		else if (curMode == 1)	str+="ACTIONS</b></td></tr>";
		$(str).appendTo("#propertyTable tbody");
   		str="<tr><td colspan='4'><div style='overflow:auto;margin:8px;overflow-x:hidden;height:240px;width:279;font-size:x-small;border:1px solid #ccc;background-color:#fff'>";
		str+="<table  id='elementsTable' cellspacing='0' cellpadding='4' style='color:#444'><tr></tr></table>";	
		str+="</div></td></tr>";
		$(str).appendTo("#propertyTable tbody");
		$("#elementsTable").empty();
		if (curMode == 0) 
 			AddElementsToTable();
 		else if (curMode == 1)
 			AddItemsToTable();
 		$("#elementsTable tr:odd").addClass("odd");
		SetActionAttributes(selectedItems[0]);
 	}

  	function AddElementsToTable()
	{
		var str,i,j,ct;
		for (i=0;i<shivaLib.cvs.elements.length;++i) {
  			str="<tr onclick='SelectElement("+i+")'><td width='260'><b>"+shivaLib.cvs.elements[i].shivaTitle+"</b></br>";
 	   		if (shivaLib.cvs.elements[i].pv)
	 	  		str+="<img src='visible.gif' style='vertical-align:bottom' onclick='VisibleElement("+i+")'>";
	   		else
	 	  		str+="<img src='invisible.gif' style='vertical-align:bottom' onclick='VisibleElement("+i+")'>";
	   		str+="<img src='updot.gif' style='vertical-align:bottom' onclick='ShiftElement("+i+",-1)'>";
	   		str+="<img src='downdot.gif' style='vertical-align:bottom' onclick='ShiftElement("+i+",1)'>";
			ct="";
 			if (shivaLib.cvs.elements[i].chartType)
 				ct="/"+shivaLib.cvs.elements[i].chartType;
 			str+=" "+shivaLib.cvs.elements[i].shivaGroup+ct+"</td></tr>";
			$(str).appendTo("#elementsTable");
			for (j=0;j<selectedItems.length;++j) {
				if (selectedItems[j] == i)
					$("#elementsTable tr:eq("+i+") td").css("border","1px solid #990000");
				}
  			}
 		if (!shivaLib.cvs.elements.length)
			$("<tr><td>No elements have been added yet. Add elements using the button below, or you can load a demo set by selecting <b>eStore</b> in the <b>Share as:</b> pulldown menu. Log in as <i>samples</i> and select the <i>Canvas Demo</i> element.<td></tr>").appendTo("#elementsTable");
		str="<tr><td width='260' align='center' onclick='LoadElement()'><br/><button id='addNewElement'>Add new element</button></td></tr>";
		$(str).appendTo("#elementsTable");
 	}

 	function AddItemsToTable()
	{
		var i,j,str,from,to,col;
		for (i=0;i<items.length;++i) {
			col=itemCols[i%itemCols.length];
			from=Math.floor(items[i].from);
			to=Math.floor(items[i].to);
			str="<tr onclick='SelectElement("+i+")'><td width='260'><font color='"+col+"'>When: <b></font><font color='#666'>"+shivaLib.cvs.elements[from].shivaTitle;
			if (items[i].from > from)
				str+="/"+Math.floor((items[i].from-from)*10);
			str+="</b><br/><font color='"+col+"'>";
			if (items[i].type == "fill")	str+="Fill: &nbsp;&nbsp;&nbsp;&nbsp;";
			else							str+="Set: &nbsp;&nbsp;&nbsp;"
			str+="<b></font>"+shivaLib.cvs.elements[to].shivaTitle;
			$(str+"</td></tr>").appendTo("#elementsTable");
			for (j=0;j<selectedItems.length;++j) {
				if (selectedItems[j] == i)
					$("#elementsTable tr:eq("+i+") td").css("border","1px solid #990000");
					}
				}
		if (!items.length)
			$("<tr><td>No actions have been created yet. Add actions by dragging a grey bar (the trigger, i.e. a checkbox) to another element's grey bar (a layer or the whole element).<td></tr>").appendTo("#elementsTable");
	}
  
  	function LoadElement()
	{
		shivaLib.EasyFile("",
				function(data) {
					shivaLib.cvs.elements.push(data);
					var i=shivaLib.cvs.elements.length-1;
					if (!shivaLib.cvs.elements[i].shivaTitle)
						shivaLib.cvs.elements[i].shivaTitle="No title";
					AddElement(i);
					Draw();
					}
				,"all");	
	}
 
  	function ShowHelp(att)
	{
		if (att == "startup") 
			$("#helpDiv").html("<br/><p class='pb'>Built by SHANTI<br/>The University of Virginia</p>");
		else
			shivaLib.ShowHelp(att,helpText);
	}	

	function SetAttributes()
	{
	}	

	function ReEdit(jsonData)
	{
		var it=shivaLib.ReEdit(jsonData,null);
		if (it)
			items=it;
		Draw();
	}

  	function SaveData(mode) 
    {
		SetDataChanged(false);
		var i,key,str="{\n";
		for (i=0;i<shivaLib.cvs.elements.length;++i) {
			str+="\"Element-"+i+"\": {\n"
			for (key in shivaLib.cvs.elements[i])
				if (key != "pe")
					str+="\t\""+key+"\": \""+shivaLib.cvs.elements[i][key]+"\",\n";
			str=str.substr(0,str.length-2);
			str+=" },\n";
			}
		str=str.substr(0,str.length-2)+",\n";
		for (i=0;i<items.length;++i) {
			str+="\"Action-"+i+"\": {\n"
			for (key in items[i]) 
				str+="\t\""+key+"\": \""+items[i][key]+"\",\n";
			str=str.substr(0,str.length-2);
			str+=" },\n";
			}
		str=str.substr(0,str.length-2);
		str+="\n}";
		$('#formatter').val(0);
		if (mode == "eStore")
			return shivaLib.EasyFile(str,function(data) {
											var i,o;
											shivaLib.cvs.elements=[];
											for (o in data)
												shivaLib.cvs.elements.push(data[o]);
											for (i=0;i<shivaLib.cvs.elements.length;++i) 
												AddElement(i);
											},"Canvas");
		$("#helpDiv").html("");
		$("#outputDiv").html("<br/><br/>Embed code:<br><textarea readonly='yes' rows='6' cols='60' id='tmptxt1'>"+str+"</textarea>");
		$("#tmptxt1").select();
	}

///////// ELEMENTS  /////////////

	function Draw()
	{
		$("#canvasDiv").empty();
		$("#canvasDiv").css("width","auto").css("height","auto").css("top","30px");
		if (curMode == 0) {
			$("#canvasDiv").css("left","300px");
			ShowElements();
			shivaLib.cvs.DrawCanvas(curMode);
			HighlightElements();	
			}
		else if (curMode == 1) {
			$("#canvasDiv").css("left","300px");
			DrawConnections();
			ShowElements();
			}
		else if (curMode == 2) {
			$("#canvasDiv").css("left","0px");
			shivaLib.cvs.DrawCanvas(curMode);
			}
	}

	function HighlightElements()											// HIGHLIGHT SHIVA ELEMENT											
	{
		var i,j,id;
		for (i=0;i<shivaLib.cvs.elements.length;++i) {										// For each element
			col="#999";															// Assume not hilited
			for (j=0;j<selectedItems.length;++j)								// For each select
				if (selectedItems[j] == i)										// If selected
					col="#ff0000";												// Set highlight color
			id="#shel"+i;														//
			if (curMode == 0) {													// In Set mode
				$(id).css('border',"1px dashed "+col).css("padding","8px");		// Padded border
				if ((shivaLib.cvs.elements[i].shivaGroup == "Visualization") || (shivaLib.cvs.elements[i].shivaGroup == "Video"))
					$(id).css("background-color","#eee");						// Grey border
				if ((shivaLib.cvs.elements[i].shivaGroup != "Control"))						// All except controls
					$(id).resizable({ aspectRatio:true,stop:ResizerStop }); 	// Resizable
				$(id).draggable({stop:DragStop,cursor:'move'});					// Draggable
				}
			else																// View mode
				$(id).css('border',"none").css("padding","0px");				// No border
			}	
	}

	function SelectElement(e)
	{
		var num;
		if (!e.data)
			num=e;
		else
			num=e.data.num;
		shivaLib.Sound("click");
		if (!e.shiftKey)
			selectedItems=[];
		selectedItems.push(num);
		ShowElements();
		if (curMode == 0)
			HighlightElements();
	}

	function AddElement(num)
 	{
		var o=shivaLib.cvs.elements[num];
		if (o.pv == undefined)		o.pv=true,o.px=o.py=num*24;
		if (o.left == undefined)	o.left=0;
		if (o.top == undefined)		o.top=0;
		if (o.dur == undefined)		o.dur=0;
		if (o.dx == undefined)		o.dx=dy=dd=0,da=o.alpha=100,o.dv=o.vis=true;
		if (o.wid == undefined)		o.dw=o.wid=400;
		if (o.vis == "true")		o.vis=true;
		if (o.vis == "false")		o.vis=false;
		o.ptype="element";
		shivaLib.cvs.CreateElement(num,curMode);
		SetDataChanged(true);
	}

	function DeleteElement(num)
 	{
		shivaLib.cvs.elements.splice(num,1);
		shivaLib.Sound("delete");
		Draw();
		SetDataChanged(true);
 	}

	function DeleteItem(num)
 	{
		items.splice(num,1);
		shivaLib.Sound("delete");
		Draw();
		SetDataChanged(true);
 	}

 	function VisibleElement(num)
 	{
		shivaLib.cvs.elements[num].pv=!shivaLib.cvs.elements[num].pv;
		Draw();
	}

 	function ShiftElement(num, dir)
 	{
		var pos=Number(num)+Number(dir);
		if ((pos < 0) || (pos >= shivaLib.cvs.elements.length))
			return num;
		var o=shivaLib.cvs.elements[pos];
		shivaLib.cvs.elements[pos]=shivaLib.cvs.elements[num];
		shivaLib.cvs.elements[num]=o;
		selectedItems[0]=pos;
		Draw();
		SetDataChanged(true);
	 }

	function onKeyUp(e) 
	{
		var i,o,num;
		if (curMode == 0) {
			var x=0,y=0,i,num;
			if 		(e.which == 38)	y=-1;
			else if (e.which == 40)	y=1;
			else if (e.which == 37)	x=-1;
			else if (e.which == 39)	x=1;
			if (!x && !y)
				return;
			for (i=0;i<selectedItems.length;++i) {
				num=selectedItems[i];
				o=shivaLib.cvs.elements[num];
				o.left=Number(o.left)+Number(x);
				o.top=Number(o.top)+Number(y);
				o.dx=o.left;
				o.dy=o.top;
				$("#shel"+num).css('left',o.left+"px");			
				$("#shel"+num).css('top',o.top,+"px");			
				
				$("#shelLeft").val(o.left);
				$("#shelTop").val(o.top);
				}
			SetDataChanged(true);
			}
		else if (curMode == 2) {
			if (e.which == 27)
				SetMode(0);
			}
	}
	 		
//// ACTIONS ////
	
	function DragStop(e,ui)
	{
		var num=e.target.id.substr(4).replace(/Dlg/g,"");
		var offX=0,offY=0;
		if (e.target.id.indexOf("Dlg") != -1) {
			offX=$("#canvasDiv").css("left").replace(/px/g,"");
			offY=$("#canvasDiv").css("top").replace(/px/g,"");
			}
		shivaLib.cvs.elements[num].dx=shivaLib.cvs.elements[num].left=Number(ui.position.left)-Number(offX);
		shivaLib.cvs.elements[num].dy=shivaLib.cvs.elements[num].top=Number(ui.position.top)-Number(offY);
		$("#shelLeft").val(shivaLib.cvs.elements[num].left);
		$("#shelTop").val(shivaLib.cvs.elements[num].top);
		SetDataChanged(true);
  	}

 	function ResizerStop(e,ui)
	{
		var num=e.target.id.substr(4);
		shivaLib.cvs.elements[num].dw=shivaLib.cvs.elements[num].wid=Math.floor(ui.size.width);
		$("#shelWid").val(shivaLib.cvs.elements[num].wid);
		Draw();
		SetDataChanged(true);
	}

	function SetItem(num)
	{
		var o,type="element";
		if (curMode == 0)
			o=shivaLib.cvs.elements[num];
		else{
			o=items[num];
			type=o.type;
			}
		var oldWid=o.wid;
		if ((type == "set") || (type == "element")) {
			o.alpha=$("#shelAlpha").val();
			o.vis=($("#shelVis").attr("checked") == "checked");
			o.dx=o.left=$("#shelLeft").val();
			o.dy=o.top=$("#shelTop").val();
			o.dw=o.wid=$("#shelWid").val();
			o.da=o.alpha;
			$("#shel"+num).css("opacity",o.alpha/100);
			$("#shel"+num).css("left",o.left+"px");
			$("#shel"+num).css("top",o.top+"px");
			if (oldWid != o.wid) 
				Draw();
			}
		if (type == "set") {
			o.dur=$("#shelDur").val();
			o.trig=$("#shelTrigger").val();
			}
		if (type == "fill") {
			o.trig=$("#shelTrigger").val();
			o.flds=$("#shelFields").val();
			o.cond=$("#shelConditions").val();
			}	
		SetDataChanged(true);
	 	}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	UI FOR GRAPHICALLY MAKING ACTIONS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var curDragItem=-1;
var curDragElement=-1;
var curDataDrag=-1;
var dragOffX=0,dragOffY=0;
var itemCols=["#990000","#009900","#000099","#999900","#009999","#000000","#999999","#FF6600","#CC00FF","#336600","996600","#660000"];
var g=new SHIVA_Graphics();


function DrawConnections()												// DRAW PROXIES/LINES
{
	$("#canvasDiv").empty();												// Clear canvas of elements
	g.CreateCanvas("links","canvasDiv",$(document).width()-320,$(document).height()-50,0,0);	// Make HTML5 graphical canvas
	DrawLinks();															// Draw link lines first
	DrawItems();															// Draw items
}

function DrawLinks()													// DRAW LINK LINES
{
	var i,o,v,k=0,dir,dir2,dir3;
	var leftToRight;
	var fx,fy,tx,ty,fr,fi,te,ti,dx,dy;
	var ctx=$("#links")[0].getContext('2d');								// Get context
	var xMax=$("#links")[0].width;											// Init max wid to cur wid
	var yMax=$("#links")[0].height;											// And hgt
	ctx.clearRect(0,0,xMax,yMax);											// Erase canvas
	for (i=0;i<shivaLib.cvs.elements.length;++i) {										// For each element
		xMax=Math.max(xMax,shivaLib.cvs.elements[i].px+200);								// Get max x
		yMax=Math.max(xMax,shivaLib.cvs.elements[i].py);									// Get max y
		}
	$("#links")[0].width=xMax;												// Set new wid
	$("#links")[0].heigt=yMax;												// Set new hgt
	for (i=0;i<items.length;++i) {											// For each action
		dleftToRight=leftToRight=true;										// Assume l-r
		dir2=dir=2;															// Dir divisors
		v=String(items[i].from).split(".");									// From array
		fe=v[0];		fi=v[1];											// Split into element/item
		v=String(items[i].to).split(".");									// To array
		te=v[0];		ti=v[1];											// Split into element/item
		if ((shivaLib.cvs.elements[fe].pv == false) || (shivaLib.cvs.elements[te].pv == false))		// If not visible
			continue;														// Skip
		fx=Number(shivaLib.cvs.elements[fe].px)+75;										// Center from x
		fy=Number(shivaLib.cvs.elements[fe].py)+Number(shivaLib.cvs.elements[fe].ph)-15;				// Y
		tx=Number(shivaLib.cvs.elements[te].px)+75;										// To X
		ty=Number(shivaLib.cvs.elements[te].py)+Number(shivaLib.cvs.elements[te].ph)-15;				// Y
		if (items[i].type == "fill") {										// If a data fill
			if (shivaLib.cvs.elements[items[i].dat].pv == false)							// If not visible
				continue;													// Skip
			dx=Number(shivaLib.cvs.elements[items[i].dat].px)+52;						// Center X
			dy=Number(shivaLib.cvs.elements[items[i].dat].py)+48;						// Y
			if (dx < fx)													// If data left of control
				leftToRight=false;											// Set l-r flag to false
			if (dx > tx) 													// If data left of control
				dleftToRight=false;											// Set d l-r flag to false
			}
		else if (tx < fx)													// If a set and left of control
			dleftToRight=leftToRight=false;									// Set l-r flag to false
		if (fi != 0)  														// If coming from a sub-item 
			fy-=(shivaLib.cvs.elements[fe].ph)-(fi*17)-33;								// Line up with item
		if (ti != 0) 														// If going to a sub-itmem
			ty-=(shivaLib.cvs.elements[te].ph)-(ti*17)-33;								// Align verically w/ item
		if (leftToRight)													// If 'to' is to the right
			fx+=78,tx-=74,dir2=-2;											// Set sides
		else																// On left	
			fx-=76,tx+=76,dir=-2;											// Set sides
		if (items[i].type == "fill") {										// If a data fill
			if (shivaLib.cvs.elements[items[i].dat].px > shivaLib.cvs.elements[te].px)				// If right of data
				tx=shivaLib.cvs.elements[te].px+150,dir2=2;
			var x=[fx,fx+(100/dir),dx,dx,dx,tx+(100/dir2),tx];				// Route line
			var y=[fy,fy,dy,dy,dy,ty,ty];									// thru data icon
			}
		else{																// Set action
			var x=[fx,fx+(100/dir),tx+(100/dir2),tx];						// Draw S-shaped
			var y=[fy,fy,ty,ty];											// line
			}
		g.DrawPolygon(ctx,-1,.75,x,y,itemCols[(k)%items.length],2,true);	// Draw line, varying color
		dx=4;																// Offset for whole
		if (ti != 0) 														// If going to a sub-itmem
			dx=12;															// Bigger offset
		if (dleftToRight)													// If l-r
			g.DrawTriangle(ctx,itemCols[(k++)%items.length],1,tx-dx,ty,4,"right")
		else																// R-l
			g.DrawTriangle(ctx,itemCols[(k++)%items.length],1,Number(tx)+dx,ty,4,"left")
		}
}

function DrawItems()													// DRAW ELEMENT PROXIES
{
	var o,v,p;
	var i,j,knum;
	var str,lab,title;
	for (i=0;i<shivaLib.cvs.elements.length;++i) {
		if (shivaLib.cvs.elements[i].pv == false)
			continue;
		num=i;
		k=0;
		o=shivaLib.cvs.elements[i];
		while (1) {
			if (!o["item-"+(Number(k)+1)])
				break;
			else
				++k;
			}
		if ((o.shivaTitle) && (o.shivaTitle.length > 22))
			title=o.shivaTitle.substr(0,22)+"...";
		else
			title=o.shivaTitle;
		if (o.shivaGroup == "Data") {
			str="<div id='element"+i+"' style='position:absolute;left:"+o.px+"px;top:"+o.py+"px'>";
			str+="<p id='item"+i+"-0' align='center'><img src='dataicon.gif'><br/><b>"+o.shivaTitle+"</b></p>";
			$("#canvasDiv").append("</div>"+str)
			$("#item"+i+"-0").css("padding","4px").addClass("rounded-corners");
			$("#element"+num).draggable({drag:ElementMove,cursor:'move'});
			o.ph=96;				
			}
		else{
			str="<div id='element"+i+"' style='position:absolute;left:"+o.px+"px;top:"+o.py+"px;width:150px;'>";
			str+="<p style='text-shadow:1px 1px white' align='center'><b>"+title+"</b></p>";
			for (j=1;j<=k;++j) {
				if (o.shivaGroup == "Control") {
					v=o["item-"+j].split(";");
					for (var ii=0;ii<v.length;++ii) {
						p=v[ii].split(":");
						lab=p[1];
						if ((p[0] == "label") && (p[1])) break;
						if ((p[0] == "def")   && (p[1])) break;
						}
					}
				else{
					s=o["item-"+j].indexOf("name:");
					e=o["item-"+j].indexOf(";",s);
					lab=o["item-"+j].substring(s+5,e)
					}
				str+="<div id='item"+i+"-"+j+"' style='position:absolute;width:166px;height:12px' class='linkButton'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+lab+"</div>";
				}
			str+="<div align='center' id='item"+i+"-0'style='position:absolute;width:133px;height:12px;' class='linkButton' >Whole element</div>";
			$("#canvasDiv").append("</div>"+str)
			$("#element"+i).addClass("rounded-corners");
			$("#element"+num).css("background-color","#eee").css('border',"1px solid #999");
			$("#element"+i).css("background","-webkit-linear-gradient(top, #dfdfdf 0%, #f0f0f0 100%)")
			$("#element"+num).draggable({drag:ElementMove,cursor:'move'});
			o.pn=k;
			o.ph=(k*17)+22+27+16;
			$("#element"+num).css("height",o.ph);
			for (j=0;j<=k;++j) {
				$("#item"+num+"-"+j).draggable({stop:StopItemDrag,start:StartItemDrag,drag:ItemDrag,cursor:'e-resize'});
				StopItemDrag("","","#item"+num+"-"+j);
				$("#item"+num+"-"+j).addClass("rounded-corners").css("background-color","#ccc").css('border',"1px solid #999");
				}
			}
		}
}

function ItemDrag(e,ui)
{
	var i,inum;
	var id="#"+e.target.id;
	var num=id.substring(5,id.indexOf("-"));
	var eid="#element"+num;
	var x=Number(ui.position.left)+Number($(eid).css("left").replace(/px/g,""))+Number(dragOffX);
	var y=Number(ui.position.top )+Number($(eid).css("top").replace(/px/g,""));
	if (curDragElement != -1) {
		if (shivaLib.cvs.elements[curDragElement].shivaGroup == "Data")
			$("#item"+curDragElement+"-"+curDragItem).css("border","none");
		else
			$("#item"+curDragElement+"-"+curDragItem).css("border","1px solid #999");
		}
	curDragItem=curDragElement=-1;
	for (i=0;i<shivaLib.cvs.elements.length;++i) {
		if ((x >= shivaLib.cvs.elements[i].px) && (x < shivaLib.cvs.elements[i].px+150) && (i != num) &&
			(y >= shivaLib.cvs.elements[i].py) && (y < shivaLib.cvs.elements[i].py+shivaLib.cvs.elements[i].ph)) {
			curDragElement=i;
			curDragItem=0;
			inum=Math.floor((y-Number($("#element"+i).css("top").replace(/px/g,"")))/17);
			if ((inum > 0) && (inum < shivaLib.cvs.elements[i].pn+1))
				curDragItem=inum;
			break;
			}
		}
	$("#item"+curDragElement+"-"+curDragItem).css("border","1px solid #990000");
}

function StartItemDrag(e,ui)
{
	var id="#"+e.target.id;
	var eid="#element"+id.substring(5,id.indexOf("-"));
	$(eid).css("z-index",1000);
	$(id).css("z-index",1001)
	dragOffX=e.pageX-$("#canvasDiv").css("left").replace(/px/g,"")-$(eid).css("left").replace(/px/g,"")-$(id).css("left").replace(/px/g,"");
	dragOffY=e.pageY-$("#canvasDiv").css("top" ).replace(/px/g,"")-$(eid).css("top" ).replace(/px/g,"")-$(id).css("top" ).replace(/px/g,"");
}

function StopItemDrag(e,ui,id)
{
	var y,s;
	$("#item"+curDragElement+"-"+curDragItem).css("border","1px solid #999");
	if (!id) 
		id="#"+e.target.id;
	var num=id.substring(5,id.indexOf("-"));
	var inum=id.substring(id.indexOf("-")+1);
	if (curDragItem != -1) {
		var o=new Object();
		o.from=num+"."+inum;
		o.to=curDragElement+"."+curDragItem;
		o.alpha=100;
		o.vis=true;
		if (shivaLib.cvs.elements[curDragElement].shivaGroup == "Data"){
			o.type="fill";
			o.fld="";
			o.query="";
			o.dat=curDragElement;
			curDataDrag=items.length;
			selectedItems[0]=items.length;
			items.push(o);
			ShowElements();
			$(id).append("<div id='dragdir' align='center' style='position:absolute;top:-16px;left:171px;width:8px;background:#eee'><font color='#990000'>Drag this over element to fill with data</font></div>");
			$("#dragdir").css("border","1px solid #990000").css("padding","4px").addClass("rounded-corners");
			shivaLib.Sound("click");
			return;
			}
		else
			o.type="set";
		if (curDataDrag != -1) {
			if (curDragElement != -1) { 
				items[curDataDrag].to=o.to;
				$("#dragdir").remove();
				DrawLinks();
				shivaLib.Sound("ding");
				}
			}		
		else{
			selectedItems[0]=items.length;
			items.push(o);
			ShowElements();
			DrawLinks();
			shivaLib.Sound("ding");
			}
		}
	else{
		if (curDataDrag != -1) {
			items.pop();
			$("#dragdir").remove();
			shivaLib.Sound("delete");
			}			
		}
	curDragItem=curDragElement=-1;
	if ((s=id.indexOf("-0")) != -1) {
		y=shivaLib.cvs.elements[num].ph-22;
		$("#element"+num).css("z-index","auto");
		$(id).css("left","9px");
		}
	else{
		y=Number(10)+(inum*17);
		$(id).css("left","-9px");
		}
	$(id).css("top",y+"px");
	$(id).css("z-index","auto");
	dragOffX=dragOffY=0;
	curDataDrag=-1;	
	SetDataChanged(true);
}

function ElementMove(e,ui)
{
	var j=e.target.id.substr(7);
	shivaLib.cvs.elements[j].px=Number(ui.position.left);
	shivaLib.cvs.elements[j].py=Number(ui.position.top)
	DrawLinks();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	EDITING ACTIONS VIA MENUS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function SetActionAttributes(num)
{
	var v,o,type="element";
	if (curMode != 0) {
		o=items[num];
		if (!o)
			return;
		type=o.type;
		}
	else
		o=shivaLib.cvs.elements[num];
	if (num < 0) {
		str="<tr height='8'><td colspan='4'></td></tr>";
		$(str).appendTo("#propertyTable")
		return;
		}
	var col=itemCols[(num-shivaLib.cvs.elements.length)%itemCols.length];
	$("<tr><td colspan='2' style='padding-left:8px;padding-right:8px;padding-bottom:8px' ><hr></td></tr>").appendTo("#propertyTable");
	if (type == "fill") {
		var from=Math.floor(o.from);
		from=shivaLib.cvs.elements[from].shivaTitle.substr(0,20);
		v=o.from.split(".");
		if (o.from > Math.floor(o.from))
			from+="/"+v[1];
		var to=Math.floor(o.to)
		to=shivaLib.cvs.elements[to].shivaTitle;
		v=o.to.split(".");
		if (o.to > Math.floor(o.to))
			to+="/"+v[1];
		var dat=Math.floor(o.dat);
		dat=shivaLib.cvs.elements[dat].shivaTitle;
		str+="<tr height='28'><td>&nbsp;&nbsp; When: &nbsp;<b>"+from+" </b>is &nbsp;<select id='shelTrigger' onChange='SetItem("+num+")' class='sm'>";
		str+=GetTriggerOptions(num)+"</td></tr>";
		$(str).appendTo("#propertyTable");
		str="<tr>><td colspan='4'>&nbsp;&nbsp; Fill: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>"+to+" </b></td></tr>";
		$(str).appendTo("#propertyTable");
		str="<tr height='28'><td colspan='4'>&nbsp;&nbsp; Using: <b>"+dat+"</b></td></tr>";
		$(str).appendTo("#propertyTable");
		str="<tr><td>&nbsp;&nbsp; If the following conditions are met: ";
		str+="<input type='button' value='Set' style='font-size:xx-small' onclick='EditConditions("+num+")'></td></tr>";
		$(str).appendTo("#propertyTable");
		str="<tr><td><p id='curQueryDiv' style='color:#777;margin-left:16px;font-weight:bold'></p></b></td></tr>";
		$(str).appendTo("#propertyTable");
	   	str="<tr><td></td><td align='right' colspan='3'><img src='trashdot.gif' onclick='DeleteItem("+num+")'> &nbsp;&nbsp;</td><td></td></tr>";
		$(str).appendTo("#propertyTable")
		str="<tr height='8'><td colspan='4'></td></tr>";
		$(str).appendTo("#propertyTable")
		if (!o.trig) {
			o.trig=GetTriggerOptions(num).substring(8);
			o.trig=o.trig.substring(0,o.trig.indexOf("<"));
			}
		$("#shelTrigger").val(o.trig);
		if (o.query)
			$("#curQueryDiv").text(o.query);
		else
			$("#curQueryDiv").text("NO CONDITIONS SET");
		return;
		}
	if ((type == "element") || (type == "set")) {
		if (type == "set") {
			var from=Math.floor(o.from);
			if (shivaLib.cvs.elements[from].shivaTitle)
				from=shivaLib.cvs.elements[from].shivaTitle.substr(0,18);
			else
				from="No title";
			v=o.from.split(".");
			if (o.from > Math.floor(o.from))
				from+="/"+v[1];
			var to=Math.floor(o.to);
			if (shivaLib.cvs.elements[to].shivaTitle)
				to=shivaLib.cvs.elements[to].shivaTitle;
			else
				to="No title";
			v=o.to.split(".");
			if (o.to > Math.floor(o.to))
				to+="/"+v[1];
			str="<tr><td>&nbsp;&nbsp;&nbsp; When:</td><td><b>"+from+" </b>is &nbsp;<select id='shelTrigger' onChange='SetItem("+num+")' class='sm'>";
			str+=GetTriggerOptions(num)+"</td></tr>";
			$(str).appendTo("#propertyTable");
			str="<tr height='22'><td>&nbsp;&nbsp;&nbsp; Set:</td><td><b> "+to+" </b></td></tr>";
			$(str).appendTo("#propertyTable");
			}
		str="<tr><td>&nbsp;&nbsp;&nbsp; Visible?</td>";
		str+="<td><input onClick='SetItem("+num+")' type='checkbox' checked='checked' id='shelVis'/></td></tr>";
		$(str).appendTo("#propertyTable");
		str="<tr><td>&nbsp;&nbsp;&nbsp; Left</td>";
		str+="<td><input size='14' onChange='SetItem("+num+")' type='text' id='shelLeft'/></td></tr>";
		$(str).appendTo("#propertyTable");
		str="<tr><td>&nbsp;&nbsp;&nbsp; Top</td>";
		str+="<td><input size='14' onChange='SetItem("+num+")' type='text' id='shelTop'/></td></tr>";
		$(str).appendTo("#propertyTable");
		str="<tr><td>&nbsp;&nbsp;&nbsp; Width</td>";
		str+="<td><input size='14' onChange='SetItem("+num+")' type='text' id='shelWid'/></td></tr>";
		$(str).appendTo("#propertyTable");
		if (type == "set") {
			str="<tr><td>&nbsp;&nbsp;&nbsp; Duration&nbsp;</td>";
			str+="<td><input size='14' onChange='SetItem("+num+")' type='text' id='shelDur'/></td><</tr>";
			$(str).appendTo("#propertyTable");
			if (!o.trig) {
				o.trig=GetTriggerOptions(num).substring(8);
				o.trig=o.trig.substring(0,o.trig.indexOf("<"));
				}
			}
		str="<tr><td>&nbsp;&nbsp;&nbsp; Opacity</td>";
		str+="<td><input style='width:120px' onChange='SetItem("+num+")' type='range' id='shelAlpha'/></td></tr>";
		$(str).appendTo("#propertyTable");
		if (type == "set") {
		   	str="<tr><td align='right' colspan='2'><img src='trashdot.gif' onclick='DeleteItem("+num+")'> &nbsp;&nbsp;</td></tr>";
			$(str).appendTo("#propertyTable")
			}
		else if (type == "element") {
		   	str="<tr><td align='right' colspan='2'><img src='trashdot.gif' onclick='DeleteElement("+num+")'> &nbsp;&nbsp;</td></tr>";
			$(str).appendTo("#propertyTable")
			}
		str="<tr height='8'><td colspan='2'></td></tr>";
		$(str).appendTo("#propertyTable")
		$("#shelAlpha").val(o.alpha);
		$("#shelVis").attr("checked",o.vis);
		$("#shelLeft").val(o.left);
		$("#shelTop").val(o.top);
		$("#shelWid").val(o.wid);
		$("#shelDur").val(o.dur);
		$("#shelTrigger").val(o.trig);
		}
}		

function EditConditions(num)											// RUN QUERY EDITOR
{
	if (this.qe)															// If already has an instance
		delete this.qe;														// Delete
	var query=items[num].query;												// Get query
	var table=shivaLib.cvs.elements[items[num].dat].dataSourceUrl;						// Get table
	var qe=new SHIVA_QueryEditor(table,query,"curQueryDiv",false);			// Start dialog
	qe.num=num;																// Save item number
}

function GetTriggerOptions(num)											// GET POSSIBLE TRIGGER OPTIONS
{
	var str="";
	var v=String(items[num].from).split(".");								// From array
	var fe=v[0];		var fi=v[1];										// Split into element/item
	var o=shivaLib.cvs.elements[fe]["item-"+fi];											// Get item string
	if ((shivaLib.cvs.elements[fe].chartType == "TimeStepper") || (shivaLib.cvs.elements[fe].chartType == "Selector")) // Button bars							
		return "<option>Checked</option><option>Unchecked</option>";		// Return options
	if (!o)																	// Must be the whole element
		return "<option>Clicked</option><option>Hovered</option>";			// Return
	if (o.indexOf("type:Checkbox") != -1)									// If a check
		str+="<option>Checked</option><option>Unchecked</option>";			// Set options
	else if (o.indexOf("type:Radio") != -1)									// If a radio
		str+="<option>Checked</option><option>Unchecked</option>";			// Set options
	else if (o.indexOf("type:Button") != -1)								// If a button
		str+="<option>Clicked</option>";									// Clicked 
	else if (o.indexOf("type:Input") != -1)									// If an input
		str+="<option>Changed</option>";									// Clicked 
	else if (o.indexOf("type:Range") != -1)									// If a range
		str+="<option>Changed</option>";									// Clicked 
	else if (o.indexOf("type:Combo") != -1)	{								// If a combo
		var s=o.indexOf("label:")+6;		var e=o.indexOf(";",s);			// Isolate label
		var v=o.substring(s,e).split("|");									// Split into options
		for (var i=0;i<v.length;++i)										// For each option
			str+="<option>"+v[i]+"</option>";								// Add option
		}
	else 																	// Anything else
		str+="<option>Clicked</option><option>Hovered</option><option>Changed</option>"; // Set options
	return str;																// Return option string
}

	
///////// GUI   //////////

	function trace(str) { console.log(str) };
	
		
</script>
</body></html>