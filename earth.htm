<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="UVALogo.ico">
	<title>SHIVA Earth</title>
	<link rel="stylesheet" type="text/css" href="css/smoothness/jquery-ui-1.8.16.custom.css">
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"></script>
	<script type="text/javascript" src='https://www.google.com/jsapi?autoload={"modules":[{"name":"earth","version":"1"}]}'></script>
 	<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
 	<script type="text/javascript" src="SHIVA_Show.js"></script>
	<style type="text/css">
		body { font-family:Verdana,Geneva,sans-serif; font-size:xx-small; }
		p.pb { text-align:right; color:#999999; }
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		tr.odd { background-color:#e0e0e0; }
		.propTable { background-color:#eee;border-radius:8px;
				  	 background:-moz-linear-gradient(top,#f0f0f0,#dfdfdf);
				  	 background:-webkit-linear-gradient(top, #f0f0f0 0%, #dfdfdf 100%);
				  	 border-collapse: collapse;
				  	 width:278px;
				  	 }
	</style>
</head>
<body>
	<div id="containerDiv" style="width:600px;height:400px;position:absolute;top:0px;left:308px"></div>
	<div style="width:279px;position:absolute;top:0px;left:0px">
	    <table id="propertyTable" class="propTable">
			<tr style="height:8px"><td> </td></tr>
		</table>
	   <p style="text-align:right"><span style="vertical-align:50%">Layers </span><span id="toolbar" style="font-size:medium" >
			<button type='button' id='tb1' onclick='ShiftItem(-1)'> </button>
			<button type='button' id='tb2' onclick='ShiftItem(1)'> </button>
			<button type='button' id='tb3' onclick='RemoveItem()'> </button>
			<button type='button' id='tb4' onclick='AddNewItem()'> </button>
		</span></p>
		<p style="text-align:right"><img src='annotate.gif' style='vertical-align:bottom' alt='Annotate' onclick='shivaLib.Annotate()'>
		<span id='saveAsDiv'></span>
		<br/><br/><label>Find on earth: </label ><input size='40' id="address" style='font-size:x-small' type="text"/>&nbsp;&nbsp;
		</p>		
		<div id="helpDiv"> </div>
	<div id="outputDiv" style="width:460px"> </div>
	</div>
	<div id="dialogDiv"> </div>
<script>

///////// GLOBALS   //////////

	var items=new Array();
	var curAtt=null;
	var shivaLib=null;
	var shivaGroup="Earth"
	var geocoder=null;
	
	var props={
		mapcenter: 					{	def:'38.03,-78.48', opt:'string',			des:'Center'}, 
		range: 						{	def:'10000', 		opt:'string',			des:'Range'}, 
		tilt: 						{	def:'0', 			opt:'string',			des:'Tilt angle'}, 
		heading: 					{	def:'0', 			opt:'string',			des:'Heading angle'}, 
		draggable: 					{	def:'true', 		opt:'true|false',		des:'Draggable?'}, 
		height: 					{	def:'600', 			opt:'number',		 	des:'Height of map'}, 
		width: 						{	def:'800', 			opt:'number',		 	des:'Width of map'}, 
		roads: 						{	def:'false', 		opt:'true|false',		des:'Show roads?'}, 
		borders: 					{	def:'true', 		opt:'true|false',		des:'Show borders?'}, 
		terrainexag: 				{	def:'1', 			opt:'1|2|3',			des:'Terrain exaggeration'}, 
		scrollwheel: 				{	def:'true', 		opt:'true|false',		des:'Enable scrollwheeel?'}, 
		overviewMapControl: 		{	def:'false', 		opt:'true|false',		des:'Overview inset control?'}, 
		panControl: 				{	def:'true', 		opt:'true|false',		des:'Zoom/Position control?'}, 
		controlbox: 				{	def:'false', 		opt:'true|false',		des:'Show controlbox?'}, 
		ud: 						{	def:'false', 		opt:'true|false',		des:'Enable user draw?'}, 
		item: 						{	def:'None', 		opt:'None|',			des:'<b>Choose layer to edit</b>'}, 
		layerTitle: 				{	def:'', 			opt:'string',		 	des:'Layer title'}, 
		layerSource: 				{	def:'', 			opt:'string',		 	des:'Layer source'}, 
		layerOptions: 				{	def:'', 			opt:'string',		 	des:'Layer options'}, 
		visible:					{	def:'true', 		opt:'true|false',		des:'Layer visibility'}, 
		layerType: 					{	def:'GoTo', 		opt:'GoTo|KML|Overlay|Drawn',	des:'Layer type'} 
		}
		
	var helpText=new Array();
	helpText['Center']="This sets the center of the view. The latitude and longitude values are separated by a comma, (i.e. 38.03,-78.48).";
	helpText['Draggable?']="Whether the map can be can navigated by dragging with a mouse.  Click on the pull-down menu to the right to choose 'true' or 'false'.";
	helpText['Range']="How far the map is zoomed in (in feet )"; 
	helpText['Tilt angle']="Degree of tilt (0-90 degrees)"; 
	helpText['Heading angle']="Degree of heading or spin (0-90 degrees)"; 
	helpText['Height of map']="The height of the map in pixels.  Click on the text box to the right to enter a number between 1 and 100000.  Please note that rendering times may be hindered for very large maps."; 
	helpText['Width of map']="The width of the map in pixels.  Click on the text box to the right to enter a number between 1 and 100000.  Please note that rendering times may be hindered for very large maps."; 
	helpText['Zoom/Position control?']="Whether the map has a pan and zoom control.  Click on the pull-down menu to the right to choose 'true' or 'false'.";
	helpText['Show roads?']="Whether to show roads on the earth view"; 
	helpText['Show borders?']="Whether to political boundaries earth view"; 
	helpText['Overview inset control?']="Whether the map has an inset overview in the bottom right-hand corner.  Click on the pull-down menu to the right to choose 'true' or 'false'.";
	helpText['Terrain exaggeration']="Exaggerates the effect of height in 3D view.";
	helpText['Enable scrollwheeel?']="Enables the mouse scrollwheel to zoom the map.  Click on the pull-down menu to the right to choose 'true' or 'false'.";
	helpText['<b>Choose layer to edit</b>']="This option lets you layer another map on top of the google map (users can layer a historical map over the google map), add a marker to your map (users can add any number of markers to the map with rollover titles), or add a KML layer.  Select the layer to edit in this pull-down, or click on the layer in the map to bring up its attributes.<br><br>To add a new layer choose None from this pull-down menu.  Set the layer source, options, visibility and type.  Then click the Add new layer button below.<br><br>To remove a layer choose said layer from the pull-down menu, then click the Remove this layer button below.";
	helpText['Layer source']="The URL address of the KML layer data. For Markers and Overlays, you can specify the data here directly:<br/><br/>For GoTo, type in the lon, lat, and other viewpoint settings (i.e., 38.03,-78.48,10000).<br/><br> For KML GeoRSS feeds. put the URL in the field: (i.e., http://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml).<br/><br>For more detailed information and instructions for adding KML layers, markers and overlays please see the UVa Knowledge Base documentation about <a href='https://wiki.shanti.virginia.edu/x/cZy1AQ' target='_blank'> SHIVA Maps tools</a>.  Or to add a KML layer easily from within SHIVA (or to add text, circles or images), just click on the grey colored pencil in a circle button below the attributes box and to activate the SHIVA drawing tool.";
	helpText['Layer title']="Click on the text box to the right and type in the title of your layer.";
	helpText['Layer options']="Options to set various layer settings. For Overlays, the top-left and bottom-right coordinates are entered, separated by comma (i.e., 38.07,-78.55,37.99,-78.41). Remember to center the map over it to be able to see it. For Markers, this is an advanced option. You can find out more information <a href='http://code.google.com/apis/maps/documentation/javascript/reference.html#KmlLayer' target='_blank'> here</a>.";	
	helpText['Layer type']="Click on the pull-down menu to the right to view and choose from the types of layers available for use on your map.<br/><br/><b>KML</b> will allow you to place a KML file as an overlay.<br/><b>GoTo</b> will fly to a particular location.<br/><b>Overlay</b> will allow you to overlay an image by specifying the corners and a URL as the source.";	
	helpText['Layer visibility']="Click on the pull-down menu to the right, if you click true the layer will be shown, click false and the layer will not be shown.";	
	helpText['Enable user draw?']="Setting this to true will allow users to add annotations to the display.  Click on the pull-down menu to the right to choose 'true' or 'false'.";
	helpText['OVERVIEW']="The SHIVA Earth tool lets you embed a Google Maps image on your web page.<br/><br/>";
	helpText['OVERVIEW']+="The layers tool allows you to add KML layers, markers and/or overlays to your map.<br/><br/>";
	helpText['OVERVIEW']+="KML is a file format used to display geographic data in an earth browser, such as Google Earth, Google Maps, and Google Maps for mobile. A KML file is processed in much the same way that HTML (and XML) files are processed by web browsers. Like HTML, KML has a tag-based structure with names and attributes used for specific display purposes, Markers or Overlays to your map.<br/><br/>";
	helpText['OVERVIEW']+="Markers are like pins that you place on your map. A marker can have information or links attached to them that can be viewed when a user clicks on or hovers their mouse over a marker.<br/><br/>";
	helpText['OVERVIEW']+="Overlays are objects on the map that are tied to latitude/longitude coordinates, so they move when you drag or zoom the map. Overlays reflect objects that you 'add' to the map to designate points, lines, or areas.<br/><br/>";
	helpText['OVERVIEW']+="To add layers to your map click the '+' button below the attributes box.  A box will open allowing you to customize your layers.<br/><br/>";
	helpText['OVERVIEW']+="Want to add text, line drawings, circles or pictures to your project?  Just click on the grey colored pencil in a circle button below the attributes box and to activate the SHIVA drawing tool.<br/><br/>";
	helpText['OVERVIEW']+="For more information and detailed instructions for utilizing this tool please visit the UVa Knowledge Base documentation for the <a href='https://wiki.shanti.virginia.edu/x/cZy1AQ' target='_blank'> Maps Tool</a>.";

///////// INIT  /////////////

     $(document).ready(function() {
		google.setOnLoadCallback(DrawEarth);
		$("#toolbar").buttonset();
		$("#tb1").button({text: false, icons: { primary: "ui-icon-arrowthick-1-n"}}).css("width","25");
		$("#tb2").button({text: false, icons: { primary: "ui-icon-arrowthick-1-s"}}).css("width","25");
		$("#tb3").button({text: false, icons: { primary: "ui-icon-trash"}}).css("width","25");
		$("#tb4").button({text: false, icons: { primary: "ui-icon-plus"}}).css("width","25");
		shivaLib=new SHIVA_Show("containerDiv");
		
		shivaLib.LoadJSLib("Earth",DrawEarth)
		shivaLib.drupalMan=(""+window.location).match(/pr=d/);
	  	shivaLib.SetAttributes(props,items,false);
		ReEdit();
 		Draw();
		ShowHelp("startup");
		if (window.addEventListener) 
			window.addEventListener("message",shivaEventHandler,false);
		else
			window.attachEvent("message",shivaEventHandler);
		if (!shivaLib.drupalMan) {
			var str="&nbsp;&nbsp;Share as: <select id='formatter' onChange='SaveData(this.value)'>";
			str+="<option>Choose format</option>";
			str+="<option>WordPress</option>";
			str+="<option>eStore</option>";
			str+="<option>iFrame</option>";
			str+="<option>JSON</option>";
			str+="<option>Web-page</option>";
			str+="</select>"; 
			$("#saveAsDiv").html(str);
			}
	
		$(function() {
		    $("#address").autocomplete({
		      source: function(request, response) {
		        geocoder.geocode( {'address': request.term }, function(results, status) {
		          response($.map(results, function(item) {
		            return {
		              label:  item.formatted_address,
		              value: item.formatted_address,
		              latitude: item.geometry.location.lat(),
		              longitude: item.geometry.location.lng()
		            }
		          }));
		        })
		      },
	     	select: function(event, ui) {
				var lookAt=shivaLib.map.getView().copyAsLookAt(shivaLib.map.ALTITUDE_RELATIVE_TO_GROUND);
				$("#propInput0").val(Math.floor(ui.item.latitude*1000)/1000+","+Math.floor(ui.item.longitude*1000)/1000);
				Draw();
		      	}
		    });
  		});

	});


geocoder=new google.maps.Geocoder();
	
function DrawEarth() 
{
	if (!shivaLib.map) {												// If not initted yet 
      	shivaLib.map="no";												// Loading
     	google.earth.createInstance("containerDiv", initCB);			// Create
	  	return;															// Quit
	  	}
	if (shivaLib.map == "no") 											// If not initted yet 
	  	return;															// Quit
	if (!shivaLib.options == "no") 										// If no options yet
	  	return;															// Quit
	
	$("#containerDiv").height(shivaLib.options.height);					// Height
	$("#containerDiv").width(shivaLib.options.width);					// Width
	this.items=items;													// Set items
	var ge=shivaLib.map;												// Point at Google Earth
	var lookAt=ge.createLookAt('');										// LookAt object
	var v=shivaLib.options.mapcenter.split(",");						// Get center
	lookAt.setLatitude(Number(v[0]));									// Set lat
	lookAt.setLongitude(Number(v[1]));									// Set lon
	lookAt.setRange(Number(shivaLib.options.range));					// Set range
	lookAt.setTilt(Number(shivaLib.options.tilt));						// Set tilt
	lookAt.setHeading(Number(shivaLib.options.heading));				// Set heading
	ge.getView().setAbstractView(lookAt);								// Go there

	if (shivaLib.options.panControl == "true")							// If controls on
		ge.getNavigationControl().setVisibility(ge.VISIBILITY_AUTO);	// Show them	  
	else																// Controls off
		ge.getNavigationControl().setVisibility(ge.VISIBILITY_HIDE);	// Hide them	 
	ge.getOptions().setOverviewMapVisibility((shivaLib.options.overviewMapControl == "true"));	// Show overview?
	ge.getOptions().setMouseNavigationEnabled((shivaLib.options.draggable == "true"));	// Show overview	 	 
	if (shivaLib.options.scrollwheel == "true")							// If scroll enabled on
		ge.getOptions().setScrollWheelZoomSpeed(1);	    				// Normal action
	else																// No scroll
		ge.getOptions().setScrollWheelZoomSpeed(.0000000001)	    	// Disable by making really small
	ge.getOptions().setTerrainExaggeration(Number(shivaLib.options.terrainexag));	// Terrain exaggeration
	ge.getLayerRoot().enableLayerById(ge.LAYER_BORDERS,(shivaLib.options.borders == "true"));
	ge.getLayerRoot().enableLayerById(ge.LAYER_ROADS,(shivaLib.options.roads == "true"));
	ge.getLayerRoot().enableLayerById(ge.LAYER_TERRAIN,true);
	
	DrawEarthOverlays(items);
	shivaLib.DrawLayerControlBox(items,shivaLib.options.controlbox == "true");
	shivaLib.dr=new SHIVA_EarthDraw(ge);
	
	function initCB(instance) {											// GOOGLE EARTH INIT
		shivaLib.map=instance;											// Set ptr to earth
		shivaLib.map.getWindow().setVisibility(true);					// Show it
		DrawEarth();													// Draw it
		google.earth.addEventListener(instance.getView(),'viewchangeend', function() { 
			var lookAt=shivaLib.map.getView().copyAsLookAt(shivaLib.map.ALTITUDE_RELATIVE_TO_GROUND);
			var view=Math.floor(lookAt.getLatitude()*10000)/10000+","+Math.floor(lookAt.getLongitude()*10000)/10000+",";
			view+=Math.floor(lookAt.getRange())+","+Math.floor(lookAt.getTilt()*100)/100+","+Math.floor(lookAt.getHeading()*100)/100;
			var str="<b>Current view: </b></br></br>"+view;
			str+="<br/><br/>Click <a href='javascript:SetNewView(\""+view+"\")'>here</a> to set as the new viewpoint";
			$('#helpDiv').html(str);
			});
 		}
	}


function DrawEarthOverlays(items) 									//	DRAW MAP OVERLAYS
{
	var i,v,opacity;
	var _this=shivaLib;
	var lookAt=_this.map.getView().copyAsLookAt(shivaLib.map.ALTITUDE_RELATIVE_TO_GROUND);	// Lookat object
	lookAt.setLatitude(Number(_this.options.mapcenter.split(",")[0]));	// Set lat
	lookAt.setLongitude(Number(_this.options.mapcenter.split(",")[1]));	// Set lon
	lookAt.setRange(Number(_this.options.range));						// Set range
	lookAt.setTilt(Number(_this.options.tilt));							// Set tilt
	lookAt.setHeading(Number(_this.options.heading));					// Set heading

	for (i=0;i<items.length;++i) {
		opacity=1;														// Assume full opacity
		if (items[i].obj) {												// If already there
			_this.map.getFeatures().removeChild(items[i].obj);			// Remove it from list
			items[i].obj=null;											// Null it out
			}
		if (items[i].layerType == "GoTo") {								// GoTo position
			v=items[i].layerSource.split(",");							// Split into parts
			if ((v.length > 1) && (items[i].visible == "true")) {		// If enough  vals and visible
				if (v[0] != undefined)	lookAt.setLatitude(Number(v[0]));	// Set lat
				if (v[1] != undefined)	lookAt.setLongitude(Number(v[1]));	// Set lon
				if (v[2] != undefined)	lookAt.setRange(Number(v[2]));	// Set range
				if (v[3] != undefined)	lookAt.setTilt(Number(v[3]));	// Set tilt
				if (v[4] != undefined)	lookAt.setHeading(Number(v[4]));// Set heading
				}
			}
		if (items[i].layerType == "Overlay") {							// Image overlay
			items[i].obj=_this.map.createGroundOverlay('');				// Alloc overlay obj
			v=items[i].layerOptions.split(",");							// Split dest pos
			var icon=_this.map.createIcon('');							// Create icon
			icon.setHref(items[i].layerSource);							// Set url
			items[i].obj.setIcon(icon);									// Set it
			var latLonBox=_this.map.createLatLonBox('');				// Create loc
			latLonBox.setBox(Number(v[2]),Number(v[0]),Number(v[1]),Number(v[3]),0); // Fill loc	
			items[i].obj.setLatLonBox(latLonBox);						// Set loc
			if (v.length == 5)											// If opacity set
				opacity=v[4]/100;										// Set it
			}
		if (items[i].layerType == "KML") {								// KML layer
			var link=_this.map.createLink('');							// Create link object	
			link.setHref(items[i].layerSource);							// Set url
			items[i].obj=_this.map.createNetworkLink('');				// Create layer object
			var fly=(items[i].layerOptions.indexOf("port") == -1)		// Preserve viewport?
			items[i].obj.set(link,true,fly); 							// Sets the link, refreshVisibility, and flyToView
			}
		if (items[i].layerType == "Drawn") {							// Drawn KML layer
			var kmlString = ''
              + '<?xml version="1.0" encoding="UTF-8"?>'
              + '<kml xmlns="http://www.opengis.net/kml/2.2">'
            + '<Document>'
  
  				+ '<Style id="randomColorIcon">'
    			+ '<IconStyle>'
  				+ '<color>ffff0000</color><scale>1</scale>'
       			+ '<Icon><href>http://www.viseyes.org/shiva/icons/blue/umbrella_32x32.png</href></Icon>'
     			+ '</IconStyle>'
    			+ '<LabelStyle><color>ffffffff</color><scale>1</scale></LabelStyle>'
   				+ '</Style>'

              + '  <Camera>'
              + '    <longitude>-122.444633</longitude>'
              + '    <latitude>37.801899</latitude>'
              + '    <altitude>139.629438</altitude>'
              + '    <heading>-70.0</heading>'
              + '    <tilt>75</tilt>'
              + '  </Camera>'
              + '  <Placemark>'
              + '    <styleUrl>#randomColorIcon</styleUrl>'
              + '    <name>This is the spot!</name>'
              + '    <Point>'
              + '      <coordinates>-122.448425,37.802907,0</coordinates>'
              + '    </Point>'
              + '  </Placemark>'
             + '</Document>'
              + '</kml>';
			items[i].obj=_this.map.parseKml(kmlString);
			if (items[i].obj.getAbstractView())
   				_this.map.getView().setAbstractView(items[i].obj.getAbstractView());
   			}
   			
		if (items[i].obj) {												// If an object
			items[i].obj.setOpacity(opacity);							// Set opacity
			if (items[i].visible == "true") 							// If visible
				_this.map.getFeatures().appendChild(items[i].obj);		// Add it to display list
			else 														// Hidden
				_this.map.getFeatures().removeChild(items[i].obj);		// Remove it from list
			}
		}
	_this.map.getView().setAbstractView(lookAt);						// Go there
}

//38.07,-78.55,37.99,-78.41,75
//http://www.viseyes.org/shiva/map.jpg
//http://code.google.com/apis/earth/documentation/samples/kml_example.kml

	function SetNewView(view)
	{
		var v=view.split(",");
		$("#propInput0").val(v[0]+","+v[1]);
		$("#propInput1").val(v[2]);
		$("#propInput2").val(v[3]);
		$("#propInput3").val(v[4]);
	}

	function shivaEventHandler(e)
	{
		if (e.data.indexOf("GetJSON") == 0) 
			e.source.postMessage("GetJSON="+SaveData("GetJSON"),"*");
		else if (e.data.indexOf("GetWebPage") == 0) 
			e.source.postMessage("GetWebPage="+SaveData("Web-page"),"*");
		else if (e.data.indexOf("GetWordPress") == 0) 
			e.source.postMessage("GetWordPress="+SaveData("WordPress"),"*");
		else if (e.data.indexOf("GetType") == 0) 
			e.source.postMessage("GetType="+shivaGroup,"*");
		else if (e.data.indexOf("PutJSON") == 0) 
			ReEdit($.parseJSON(e.data.substr(8)));
		else if (e.data.indexOf("PutFile=KML") == 0) {
			var v=e.data.split("=")
			if (v[2] < items.length)
	 	       	$("#itemInput"+v[2]+"-2").val(v[3]);
			Draw();
			}
	}
 
	function Draw()
	{	
		if (shivaLib.drupalMan)  
			window.parent.postMessage("DataChanged=true","*");
		shivaLib.options=ops=$.parseJSON(SaveData("GetJSON"));
		DrawEarth($.parseJSON(SaveData("GetJSON")));
	}

	function MakeKML()
	{
		var o,i,j,a;
		var p=new google.maps.Point(0,0);
		var proj=projection.getProjection();
		var str="<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n<Document>\n"; 
		for (i=0;i<shivaLib.overlay.length;++i) {									// For each seg
			o=shivaLib.overlay[i];													// Point at it
			a=Math.round(o.alpha*2.55).toString(16);								// Get alpha
			if (a.length == 1)														// If single digit
				a="0"+a;															// Pad 
			if (o.type < 3) {														// Geometric shapes
				str+="<Placemark>\n";												// Placemark
				str+="\t<Style id=\"sty"+i+"\">\n";									// Style
				str+="\t\t<LineStyle>\n\t\t\t<color>";								// Color start
				if (o.edgeColor == -1)												// If no color
					str+="00000000";												// No alpha
				else
					str+=a+o.edgeColor.substring(5,7)+o.edgeColor.substring(3,5)+o.edgeColor.substring(1,3);	// ABGR		
				str+="</color>\n";													// Color end
				str+="\t\t\t<width>"+(Math.round(o.edgeWidth/10)+1)+"</width>\n\t\t</LineStyle>\n";	// Width 
				str+="\t\t<PolyStyle>\n\t\t\t<color>";								// Color start
				if (o.color == -1)													// If no color
					str+="00000000";												// No alpha
				else
					str+=a+o.color.substring(5,7)+o.color.substring(3,5)+o.color.substring(1,3);	// ABGR		
				str+="</color>\n\t\t</PolyStyle>\n";								// Color/poly end
				str+="\t</Style>\n\t<styleUrl>sty"+i+"</styleUrl>\n";				// Style URL
				if (o.color == -1)													// If no fill
					str+="\t<LineString><coordinates>\n";							// Line
				else																// fill
					str+="\t<Polygon><outerBoundaryIs><LinearRing><coordinates>\n";	// Polygon
				if (o.type == 0) {													// Lines/polygons
					for (j=0;j<o.x.length;++j) {									// For each point
						p.x=o.x[j];			p.y=o.y[j];								// Get coord		
						str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
						}
					if (o.color != -1) {											// If a polygon
						p.x=o.x[0];			p.y=o.y[0];								// Complete it					
						str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
						}
					}
				else if (o.type == 1) {												// Circles
					var r=Math.abs(o.x[1]-o.x[0]);									// Radius
					for (j=0;j<=360;j+=10) {										// 18 segs
						p.x=(Math.cos(j*.0174532925)*r)+o.x[0];						// Get x
						p.y=(Math.sin(j*.0174532925)*r)+o.y[0];						// Y
						str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
						}	
					}
				else if (o.type == 2) {												// Boxes
					p.x=o.x[0];			p.y=o.y[0];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[1];			p.y=o.y[0];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[1];			p.y=o.y[1];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[0];			p.y=o.y[1];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					p.x=o.x[0];			p.y=o.y[0];										
					str+="\t\t"+proj.fromContainerPixelToLatLng(p).lng()+","+proj.fromContainerPixelToLatLng(p).lat()+"\n";
					}
				if (o.color == -1)													// If no fill
					str+="\t</coordinates></LineString>\n";							// Line
				else																// fill
					str+="\t</coordinates></LinearRing></outerBoundaryIs></Polygon>\n";
				str+="</Placemark>\n";												// End placemark
				}	
			if (o.type == 4) {														// Image
				str+="<GroundOverlay>\n";											// Overlay
//				str+="\t<LookAt>\n";												// Look at
//				str+="\t\t<latitude>" +shivaLib.map.getCenter().lat()+"</latitude>\n"; 	// Lat
//				str+="\t\t<longitude>"+shivaLib.map.getCenter().lng()+"</longitude>\n"; // Lon
//				str+="\t</LookAt>\n";												// /Look at
				str+="\t<Icon>\n\t\t<href>"+o.imageURL+"</href>\n\t</Icon>\n";		// Image
				p.x=o.x[0];			p.y=o.y[0];										// Corner 1
				str+="\t\t<LatLonBox>\n";											// Coords
				str+="\t\t<north>"+proj.fromContainerPixelToLatLng(p).lat()+"</north>\n"; // N
				str+="\t\t<west>" +proj.fromContainerPixelToLatLng(p).lng()+"</west>\n";  // W
				p.x=o.x[1];			p.y=o.y[1];										// Corner 2
				str+="\t\t<south>"+proj.fromContainerPixelToLatLng(p).lat()+"</south>\n"; // S
				str+="\t\t<east>" +proj.fromContainerPixelToLatLng(p).lng()+"</east>\n";  // E
				str+="\t</LatLonBox>\n";											// /Coords
				str+="</GroundOverlay>\n";											// /Overlay
				}
			}
		str+="</Document>\n</kml>";
		return str;
	}

	function SaveData(mode)
	{
		if (mode == "KML") {
			$('#formatter').val(0)
			$("#outputDiv").html("<br/><br/>Embed code:<br><textarea readonly='yes' rows='6' cols='60' id='tmptxt1'>"+MakeKML()+"</textarea>");
			$("#tmptxt1").select();
			}
		else return shivaLib.SaveData(mode,shivaGroup,items,props);
	}	

	function ReEdit(jsonData)
	{
		var it=shivaLib.ReEdit(jsonData,props);
		if (it)
			items=it;
	  	shivaLib.SetAttributes(props,items,true);
		Draw();
	}	

	function ShowHelp(att)
	{
		if (att == "startup") 
			$("#helpDiv").html("<br/><p class='pb'>Powered by Google&trade;<br/><br/>Built by SHANTI<br/>The University of Virginia</p>");
		else
			shivaLib.ShowHelp(att,helpText);
	}	
			
///////// ITEMS  /////////////
	
	function AddNewItem()
	{
		var o=new Object;
		var s=0,i=0;
		shivaLib.Sound("ding");
		for (var key in props) {
			if (key == "item")
				s=i;
			++i;
			if (!s)
				continue;
			o[key]=props[key].def;
			}
		items.push(o);
		for (var i=0;i<items.length;++i)
			items[i].name="Layer-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		Draw();
		$("#accord").accordion({ active: items.length-1 });
	}	
	
	function RemoveItem()
	{
		var active=$("#accord").accordion("option","active");
		if (active === false)
			return;
		shivaLib.Sound("delete");
		items.splice(active,1);
		for (var i=0;i<items.length;++i) 
			items[i].name="Layer-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		Draw();
	}

	function ShiftItem(dir)
	{
		var cur=shivaLib.ShiftItem(dir,items);
		for (var i=0;i<items.length;++i) 
			items[i].name="Layer-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		if (cur != -1)
			$("#accord").accordion({ active: cur });
	}

	function trace(str) { console.log(str) };


/////////////////////////////////////////////////////////////////////////////////////////////////////////
// DRAWING
/////////////////////////////////////////////////////////////////////////////////////////////////////////

function SHIVA_EarthDraw(ge)												// CONSTRUCTOR
{
	this.ge=ge;
	this.lats=[38.02,38.02,38.04];
	this.lons=[-78.48,-78.50,-78.52];
	shivaLib.dr=this;
	test("line1")
}
	
SHIVA_EarthDraw.prototype.AddCoordControlDot=function(lat, lon, num, scale)	// ADD COORD CONTROL DOT
{
	var ge=this.ge;																// Local copy of earth
	var placemark=ge.createPlacemark("cd-"+num);								// Create named placemark
	var point=ge.createPoint('');												// Create point
	var icon=ge.createIcon('');													// Create icon
	var styleMap=ge.createStyleMap('');											// Create style map
	
	var normalStyle=ge.createStyle(''); 										// Create style
	if (scale == .5)															// Coord icon
		icon.setHref('http://www.viseyes.org/shiva/coordcir.png');				// Set icon url
	else																		// Add icon
		icon.setHref('http://www.viseyes.org/shiva/coordadd.png');				// Set icon url
	normalStyle.getIconStyle().setIcon(icon); 									// Set icon		
	normalStyle.getIconStyle().setScale(scale);									// Set icon scale
	styleMap.setNormalStyle(normalStyle);										// Set normal style

	var highlightStyle=ge.createStyle(''); 										// Create style
	icon=ge.createIcon('');														// Create icon
	if (scale == .5)															// Coord icon
		icon.setHref('http://www.viseyes.org/shiva/coordsel.png');				// Set icon url
	else																		// Add icon
		icon.setHref('http://www.viseyes.org/shiva/coordadd.png');				// Set icon url
	highlightStyle.getIconStyle().setIcon(icon); 								// Set icon		
	highlightStyle.getIconStyle().setScale(1.5);								// Set icon scale
	styleMap.setHighlightStyle(highlightStyle);									// Set highlight style
	
	placemark.setStyleSelector(styleMap); 										// Add icon to placemark
	point.setLatitude(lat);														// Set lat
	point.setLongitude(lon);													// Set lon
	placemark.setGeometry(point);												// Place icon
	ge.getFeatures().appendChild(placemark);									// Add to DOM
}	

SHIVA_EarthDraw.prototype.AddControlDots=function(id) 						// ADD COORD EDITING DOTS			
{
	var i,j,a,b,o;
	var ge=this.ge;																// Local copy of earth
	var obs=ge.getFeatures().getChildNodes()									// Point at nodes
	var n=obs.getLength();														// Get length
	for (i=0;i<n;++i) {															// For each child
		o=ge.getElementById(obs.item(i).getId());								// Get dot's id
		if (o)	ge.getFeatures().removeChild(o);								// Remove dot	
		}
	if (!this.lons.length)														// If no coords
		return;																	// Quit
	this.AddCoordControlDot(this.lats[0],this.lons[0],0,.5);					// Add 1st dot								
	for (i=1;i<this.lons.length;++i) {											// For all other dots
		j=i-1;																	// Last dot index
		this.AddCoordControlDot(this.lats[i],this.lons[i],i,.5);				// Add dot
		a=((this.lats[i]-this.lats[j])/2)+this.lats[j];							// Middle lat
		b=((this.lons[i]-this.lons[j])/2)+this.lons[j];							// Middle lon
		this.AddCoordControlDot(a,b,(i-.5),.33);								// Add middle dot	
		}
	
	google.earth.addEventListener(ge.getWindow(),"mousedown", 				// ON MOUSE DOWN
		function(e) {
		    if ((e.getTarget().getType() == "KmlPlacemark") && (e.getTarget().getGeometry().getType() == "KmlPoint")) // If a point in a placemark
		     	if (e.getTarget().getId().substr(0,3) == "cd-")	{				// If a control dot
			    	dragInfo={ placemark: e.getTarget(), dragged: false   };	// Set global dragIno obj
					shivaLib.Sound("click");									// Click
					}
			});
	
	google.earth.addEventListener(ge.getGlobe(),'mousemove', 				// ON MOUSE MOVE
		function(e) {
			var o,oo,lat,lon,num;
			if (dragInfo) {														// If dragging											
	      		e.preventDefault();												// Stop popagation
				if (e.getTarget().getId().indexOf(".5") != -1) 					// A mid point
					return;														// Quit
	     		dragInfo.dragged=true;											// Drag flag
				o=shivaLib.map.getElementById(id);								// Pointer to line
	      		var point=dragInfo.placemark.getGeometry();						// Get coord
				num=Number(e.getTarget().getId().substr(3));					// Get index into line
				lat=e.getLatitude();											// Get lat
				lon=e.getLongitude();											// Get lon
	      		point.setLatitude(lat);											// Set new lat
	     		point.setLongitude(lon);										// Set new lon				

				o.getGeometry().getCoordinates().setLatLngAlt(num,lat,lon,0);	// Set point in line
				o=shivaLib.map.getElementById('cd-'+(num-1));					// Pointer to pevious dot
				if (o) {														// If one
					o=o.getGeometry();											// Point at geometry
					oo=shivaLib.map.getElementById('cd-'+(num-.5));				// Pointer to middle dot
					oo=oo.getGeometry();										// Point at geometry
					oo.setLatitude(lat+(o.getLatitude()-lat)/2);				// Set mid-point lat
					oo.setLongitude(lon+(o.getLongitude()-lon)/2);				// Lon
					}
				o=shivaLib.map.getElementById('cd-'+(num+1));					// Pointer to next dot
				if (o) {														// If one
					o=o.getGeometry();											// Point at geometry
					oo=shivaLib.map.getElementById('cd-'+(num+.5));				// Pointer to middle dot
					oo=oo.getGeometry();										// Point at geometry
					oo.setLatitude(lat+(o.getLatitude()-lat)/2);				// Lat
					oo.setLongitude(lon+(o.getLongitude()-lon)/2);				// Lon
					}
			   }
			});

  	google.earth.addEventListener(ge.getWindow(),'mouseup', 				// ON MOUSE UP
  		function(e) {
 			var id="line1";
 			if (dragInfo) {														// If dragging
  				if (dragInfo.dragged) 	e.preventDefault();						// Stop propagation
		    	dragInfo=null;													// Kill drag obj
			 	}
			if ((e.getTarget().getType() == "KmlPlacemark") && (e.getTarget().getGeometry().getType() == "KmlPoint"))  { // If a point in a placemark
				if (e.getTarget().getId().indexOf(".5") != -1) { 				// A mid point
					var	num=Math.floor(e.getTarget().getId().substr(3));		// Get index into line
					shivaLib.dr.AddPointToLine(id,num);							// Bisect line
 					shivaLib.Sound("ding");										// Ding
 					}
   				}
 //  		if (e.getShiftKey())												// If deleting point
			});

}

SHIVA_EarthDraw.prototype.AddPointToLine=function(id, num)				// ADD NEW POINT TO LINE
{
	return;
	var lat=(this.lats[num]+(this.lats[num+1]-this.lats[num])/2);				// Bisected lat
	var lon=(this.lons[num]+(this.lons[num+1]-this.lons[num])/2);				// Lon
	this.lats.splice(num+1,0,lat);												// Add lat to array									
	this.lons.splice(num+1,0,lon);												// Add lon							
	if (this.ge.getElementById(id))												// If there
		this.ge.getFeatures().removeChild(this.ge.getElementById(id));			// Remove 
	test("line2");
}

	function test(id)
	{
 		trace(id)
 		var _this=shivaLib.dr;
		var ge=_this.ge;															// Local copy of earth
 		
  	if (id == "line1")
 		_this.AddControlDots(id);			
 		var lineStringPlacemark=ge.createPlacemark(id);
		var lineString=ge.createLineString('');
		lineStringPlacemark.setGeometry(lineString);
		trace(_this.lats.length)
		for (i=0;i<_this.lats.length;++i)
			lineString.getCoordinates().pushLatLngAlt(_this.lats[i],_this.lons[i],0);
		ge.getFeatures().appendChild(lineStringPlacemark);
	trace(_this.lats)
	}
	
	
	
</script>
</body>
</html>