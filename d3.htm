<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
		<title>D3 Testbed</title>
		<script type="text/javascript" src="d3.v3.min.js"></script>
		<style type="text/css">

 </style>
  </head>
  <body>
    <div id="body">
      <div id="footer">
     </div>
    <script type="text/javascript">

	var options={}
	options.lSize=12;
	options.lCol="000";
	options.width=800;
	options.height=600;
	options.trans=1000;
	options.padding=2;
	options.style="Grou[p";
	options.gCol="1f77b4";
	options.nCol="ff9333";
	
	var dataSet=null;
	firstTime=true;	

	var unselectable={"-moz-user-select":"none","-khtml-user-select":"none",	
		   			  "-webkit-user-select":"none","-ms-user-select":"none",
		   			  "user-select":"none","pointer-events":"none" }

/////////////////////////////////////////////////////////////////////////////////////////////////////////

    colors = d3.scale.category10();
	var svg=d3.select("body").append("svg")
	    .attr("width",options.width)
	    .attr("height",options.height)

	d3.json("flare.json", function(d) { dataSet=d; redraw() });

	function redraw() {												// DRAW
		
/////////////////////////////////////////////////////////////////////////////////////////////////////////

			
				var dia=Math.min(options.height,options.width)-8;			// Diameter
				var bubble=d3.layout.pack()								// Create layout
					.size([dia,dia])									// Set size
		    		.padding(options.padding);							// Padding
			  	
				if (options.style != "Spiral")							// If not a spiral
			  		bubble.sort(null)									// Don't sort
			  	
			  	var node=svg.selectAll("node")							// Select the nodes
					.data(bubble.nodes(classes(dataSet))				// Set data							
					.filter(function(d) { return !d.children; }))		// Filter by children
			   
			    node.enter().append("g")								// Add node
			      .attr("transform",function(d) { return "translate("+d.x+","+d.y+")"; });	// Position
			  	
			  	node.append("title")									// Set tool tip
			      .text(function(d) { return d.className + ": " + d.value; });	// Value
				
				node.append("circle")									// Add circle
			      	.attr("r", function(d) { return d.r; })				// Set diameter
			      	.style("fill", function(d) { return colors(d.packageName); });	// Set color
		
		 		node.append("text")										// Add text
			      	.attr("dy",".3em")									// Shift
					.attr("font-family","sans-serif")					// Sans
					.attr("text-anchor", "middle")						// Centered
					.attr("font-size",options.lSize+"px")				// Size
					.attr("fill","#"+options.lCol)						// Color
			      	.style("text-anchor","middle")						// Center
			      	.style(unselectable)								// Unselectable
			      	.text(function(d) { return d.className.substring(0,d.r/3); });
	
				function classes(root) {								// Returns a flattened hierarchy 
					var classes=[];
					
					function recurse(name, node) {
				    	if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
				    	else classes.push({packageName: name, className: node.name, value: node.val});
				  		}
				  	
				  	recurse(null, root);
				  	return {children: classes};
					}
					
			d3.select(self.frameElement).style("height",dia+"px");
	}
	
	
	
	
	
	

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

	function trace(msg) { console.log(msg) };

    </script>
  </body>
</html>
