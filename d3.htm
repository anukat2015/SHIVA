<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
		<script type="text/javascript" src="d3.v3.min.js"></script>
		<script type="text/javascript" src="shivalib-min.js"></script>
		<title>D3 Testbed</title>
		<style type="text/css">
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		 </style>
  </head>
  <body>
 
 	<div id="containerDiv" style="position:absolute;top:20px;left:20px;height:600px;width:800px"> </div>

  <script type="text/javascript">

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// SETUP
/////////////////////////////////////////////////////////////////////////////////////////////////////////

	var options={}
	options.lSize=11;
	options.lCol="#000000";
	options.trans=250;
	options.nCol="b0c4de";
	options.depth=0;
	options.width=800;
	options.height=300;
	options.chartType="Stream";
	options.sCol="none";
	options.dateFormat="mo d, y";
	options.backCol="fff"
	options.style="Stream"
	options.area="Curved"
	
	var unselectable={"-moz-user-select":"none","-khtml-user-select":"none",	
		   			  "-webkit-user-select":"none","-ms-user-select":"none",
		   			  "user-select":"none","pointer-events":"none" }

	var con="#containerDiv"												// Container
	
	
	var firstTime=true;													// If first time
	var id=0;															// Id counter
	var d3Zoom;															// D3 zoom obj
	var maxDepth=0;
	var overTree,selectTree	

	var h=options.height;
	var w=options.width;
	var	shivaLib=new SHIVA_Show("containerDiv");
	
	if (options.backCol == "none")										// If  transparent
		$(con).css("background-color","transparent");					// Set background color
	else																// Normal color
		$(con).css("background-color","#"+options.backCol);				// Set background color
	$(con).width(options.width);	$(con).height(options.height);		// Set size


	function zoomed(d) {												// ZOOM HANDLER
 		var tp=d3.event.translate;										// Translation
 		var scale=d3.event.scale;										// Scale
  		svgSelect.attr("transform","translate("+tp+") scale("+scale+")");	// Do it
 		} 	

	var svg=d3.select(con)									// Add SVG 
		.append("svg")													// Add SVG shell
		.attr("width",options.width).attr("height",options.height)	// Set size
		.append("g")													// Add group	
				
 				
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// DATA
/////////////////////////////////////////////////////////////////////////////////////////////////////////

	var dataSet=[];
	firstTime=false;													// Been there
 	
 
		d3.csv("data1.csv", function(data) {
			var t=[],o=[];
			for (x in data[0])	o.push(x);
			t.push(o)
			data.forEach(function(d,i) {
				var o=[]
				for (x in d)	o.push(d[x]);
				t.push(o)
				})
			var i,j,n;
			var n=t.length;
			var fn=t[0].length-1;
			for (i=1;i<fn;++i) {								// For each layer
				for (j=1;j<n;++j) {								// For time point
					var o={};									// New obj
					o.key=t[0][i];								// Set field name as key
					o.date=new Date(t[j][0]);					// Set date
					o.value=t[j][i]-0;							// Set value
					dataSet.push(o);							// Add item
					}
				}
		 	trace(dataSet)
		 	redraw();
		})
	
 	
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// DRAW
/////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	function redraw() {												// DRAW

		// NETWORK /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		if (options.chartType == "Stream") {							// Stream graph
				var colorRange=["#B30000", "#E34A33", "#FC8D59", "#FDBB84", "#FDD49E", "#FEF0D9"];
			if (options.sCol != "none") {								// Using a specified color set
				colorRange=[];
				var v=options.sCol.split(",");
				for (i=0;i<v.length;++i)	colorRange.push("#"+v[i]);
				}
			var colorSet=d3.scale.ordinal().range(colorRange);			// Scale colorset
			var x=d3.time.scale().range([0,options.width]);				// Scale x
			var y=d3.scale.linear().range([options.height-options.lSize-10,options.lSize+10]);	// Scale y
						
			var timeBar=d3.select(con)									// Add start/end date bar
		        .append("div")											// Add div
		        .style("position","absolute")							// Setup
		        .style("top",(options.height-options.lSize-6)+"px").style("left","0px") // Pos
		    	.style("font-size",options.lSize+"px").style("color","#"+options.lCol).style("font-family","sans-serif")
				.html("<span id='startDate'></span><span id='endDate' style='position:absolute;left:"+(options.width-200)+"px;width:200px;text-align:right'></span>")
			
			var dataBar=d3.select(con)									// Add vertical data bar
		        .append("div")											// Add div
		        .style("position","absolute")							// Setup
		        .style("width","2px").style("height",options.height-options.lSize*2-20+"px")			// Size
		        .style("pointer-events","none")							// No mouse hits
		        .style("top",(options.lSize+10)+"px").style("left","0px").style("background","#fff")  // Pos
		    	.style("font-size",options.lSize+"px").style("color","#"+options.lCol).style("font-family","sans-serif")
				.html("<div id='vdat' style='position:absolute;left:-100px;top:"+(-options.lSize-6)+"px;width:200px;text-align:center'></div><div id='vnow' style='background-color:#fff;position:absolute;left:-100px;top:"+(options.height-options.lSize*2-16)+"px;width:200px;text-align:center'></div>")		

							
			var stack=d3.layout.stack()									// Create layout
					.offset("silhouette")								// Center the stream
			    	.values(function(d) { return d.values; })			// Get values
			   	 	.x(function(d) { return d.date; })					// Plot date on x axis
			    	.y(function(d) { return d.value; });				// Vaalue on y
			if (options.style == "Full")	stack.offset("expand")		// Full varient
			if (options.style == "Stacked")	stack.offset("zero")		// Stacked varient
			
			var nest=d3.nest().key(function(d) { return d.key; });		// Nest on keys
			var layers=stack(nest.entries(dataSet));					// Create layers
				
			var area=d3.svg.area()										// Create stream
			    .interpolate("cardinal")								// Use cardinal spline
			    .x(function(d) { return x(d.date); })					// Plot date on x axis
			    .y0(function(d) { return y(d.y0); })					// Plot y0 
			    .y1(function(d) { return y(d.y0 + d.y); });				// Plot y1
			  
			x.domain(d3.extent(dataSet, function(d) { return d.date; }));	
		 	y.domain([0,d3.max(dataSet, function(d) { return d.y0 + d.y; })]);	
		
			if (options.area == "Flat")	area.interpolate("linear")		// Linear varient
			if (options.area == "Stepped")	area.interpolate("step")	// Stepped varient
		
				svg.selectAll(".layer")									// Add layers
			      		.data(layers)									// Set data
		    			.enter().append("path")							// Add path
				      	.attr("class","layer")							// Set class
			      		.attr("d", function(d) { return area(d.values); })		// Set position
			      		.style("fill", function(d, i) { return colorSet(i); });	// Set color
			
				 svg.selectAll(".layer")								// Point at layers
						.attr("opacity",1)								//  Assunme fully opaque if mouse is out
						.on("mouseover", function(d,i) {				// On mouse over
				      		svg.selectAll(".layer")						// Point at layers
	      		     		.transition().duration(250)					// Quick transition
				     	 	.attr("opacity", function(d,j) {			// Set opacity
				        		return j != i ? 0.6 : 1;				// If over, set to 1, else .6
				    		})
				   	 	})
		
				.on("mousemove", function(d, i) {						// When hovering over layer
						var k,o,datearray=[];
						var date=x.invert(d3.mouse(this)[0]);			// Get date from x pos
				      	var now=date.getFullYear()*3650+date.getMonth()*300+date.getDate();	// Unique now
				      	var selected=(d.values);						// Selected layer						
				      	for (var k=0;k<selected.length;k++) { 			// For each data point
				        	o=selected[k].date;							// Get date
				        	datearray[k]=o.getFullYear()*3650+o.getMonth()*300+o.getDate();	// Make unique id
				        	}
					   	k=datearray.indexOf(now);						// Data item over
						d3.select(this).attr("stroke","#000").attr("stroke-width","0.5px")			// Show border
			        	dataBar.style("left",d3.mouse(this)[0]+"px");	// Position data bar
			      		$("#vnow").text(shivaLib.FormatDate(date,options.dateFormat))
			      		$("#vdat").text(d.key+": "+d.values[k].value)	// Show value
			      		dataBar.style("visibility","visible");			// Show data bar
			    		})

			    .on("mouseout", function(d, i) {						// Stop hovering on layer
			     		svg.selectAll(".layer")							// Get all layers
			      			.transition().duration(250)					// Quick transition
			      			.attr("opacity","1");						// Make layer opaque
			      		d3.select(this).attr("stroke-width","0px");		// Add border	
			      		dataBar.style("visibility","hidden");			// Hide data bar
			  			})
			    
			$("#startDate").text(shivaLib.FormatDate(x.invert(0),options.dateFormat));				// Set start date
			$("#endDate").text(shivaLib.FormatDate(x.invert(options.width),options.dateFormat));	// Set end date
			}															// End Stream


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/// STANDARD STUFF
/////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		firstTime=false;												// Not first time thru
		}																// End update

    </script>
  </body>
</html>
