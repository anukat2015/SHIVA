<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
		<script type="text/javascript" src="d3.v3.min.js"></script>
		<script type="text/javascript" src="shivalib-min.js"></script>
		<title>D3 Testbed</title>
		<style type="text/css">
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
.chord {
  fill-opacity: .67;
}


		 </style>
  </head>
  <body>
 
 	<div id="containerDiv" style="position:absolute;top:20px;left:20px;height:800px;width:1800px"> </div>

  <script type="text/javascript">

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// SETUP
/////////////////////////////////////////////////////////////////////////////////////////////////////////

	var options={}
	options.lSize=11;
	options.lCol="000000";
	options.width=800;
	options.chartType="Chord";
	options.padding=150;
	options.bandWidth=40;
	options.hCol="4682B4";
	options.backCol="ffffff"
	options.sCol="none";
	options.fill="true";
	
	var unselectable={"-moz-user-select":"none","-khtml-user-select":"none",	
		   			  "-webkit-user-select":"none","-ms-user-select":"none",
		   			  "user-select":"none","pointer-events":"none" }

	var con="#containerDiv"												// Container
	
	
	var firstTime=true;													// If first time
	var id=0;															// Id counter
	var d3Zoom;															// D3 zoom obj
	var maxDepth=0;
	var overTree,selectTree	

	var h=options.height;
	var w=options.width;
	var	shivaLib=new SHIVA_Show("containerDiv");
	
	if (options.backCol == "none")										// If  transparent
		$(con).css("background-color","transparent");					// Set background color
	else																// Normal color
		$(con).css("background-color","#"+options.backCol);				// Set background color
	$(con).width(options.width);	$(con).height(options.height);		// Set size


	function zoomed(d) {												// ZOOM HANDLER
 		var tp=d3.event.translate;										// Translation
 		var scale=d3.event.scale;										// Scale
  		svgSelect.attr("transform","translate("+tp+") scale("+scale+")");	// Do it
 		} 	

	var svg=d3.select(con)												// Add SVG 
		.append("svg")													// Add SVG shell
		.attr("width",options.width).attr("height",options.height)		// Set size
		.append("g")													// Add group	
			
 				
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// DATA
/////////////////////////////////////////////////////////////////////////////////////////////////////////




	var dataSet=[];
 	
 
		d3.csv("data1.csv", function(data) {
			var t=[],o=[];
			for (x in data[0])	o.push(x);
			t.push(o)
			data.forEach(function(d,i) {
				var o=[]
				for (x in d)	o.push(d[x]);
				t.push(o)
				})
			data=t;
////			
			dataSet=[];													// Init as array 
 			dataSet.nodes=[];
 			dataSet.edges=[];
			dataSet.nodes.push({id:0, name:"Adam"})			
			dataSet.nodes.push({id:1, name:"Bob"})			
			dataSet.nodes.push({id:2, name:"Carrie"})			
			dataSet.nodes.push({id:3, name:"Donnovan"})			
			dataSet.nodes.push({id:4, name:"Edward"})			
			dataSet.nodes.push({id:5, name:"Felicity"})			
			dataSet.nodes.push({id:6, name:"George"})			
			dataSet.nodes.push({id:7, name:"Hannah"})			
			dataSet.nodes.push({id:8, name:"Iris"})	
			dataSet.nodes.push({id:9, name:"Jerry"})			
			dataSet.edges.push( {source:{index:0}, target:{index:1} })			
			dataSet.edges.push( {source:{index:0}, target:{index:1} })			
			dataSet.edges.push( {source:{index:0}, target:{index:2} })			
			dataSet.edges.push( {source:{index:0}, target:{index:3} })			
			dataSet.edges.push( {source:{index:0}, target:{index:3} })			
			dataSet.edges.push( {source:{index:1}, target:{index:2} })			
			dataSet.edges.push( {source:{index:2}, target:{index:3} })			
			dataSet.edges.push( {source:{index:3}, target:{index:4} })			
			dataSet.edges.push( {source:{index:4}, target:{index:5} })			
			dataSet.edges.push( {source:{index:5}, target:{index:6} })			
		


 ////
		 	redraw();
		})
	
 	
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// DRAW
/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		
	function redraw() {												// DRAW

	// CHORD /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

	if (options.chartType == "Chord") {								// Chord graph

var outerRadius = 700 / 2,
    innerRadius = outerRadius - 130;

var fill = d3.scale.category20c();

var chord = d3.layout.chord()
    .padding(.04)
    .sortSubgroups(d3.descending)
    .sortChords(d3.descending);

var arc = d3.svg.arc()
    .innerRadius(innerRadius)
    .outerRadius(innerRadius + 20);

    svg.attr("transform", "translate(" + outerRadius + "," + outerRadius + ")");

d3.json("flare.json", function(error, imports) {
  var indexByName = d3.map(),
      nameByIndex = d3.map(),
      matrix = [],
      n = 0;

  // Returns the Flare package name for the given class name.
  function name(name) {
    return name.substring(0, name.lastIndexOf(".")).substring(6);
  }

  // Compute a unique index for each package name.
  imports.forEach(function(d) {
    if (!indexByName.has(d = name(d.name))) {
      nameByIndex.set(n, d);
      indexByName.set(d, n++);
    }
  });

  // Construct a square matrix counting package imports.
  imports.forEach(function(d) {
    var source = indexByName.get(name(d.name)),
        row = matrix[source];
    if (!row) {
     row = matrix[source] = [];
     for (var i = -1; ++i < n;) row[i] = 0;
    }
    d.imports.forEach(function(d) { row[indexByName.get(name(d))]++; });
  });

  chord.matrix(matrix);

  var g = svg.selectAll(".group")
      .data(chord.groups)
    .enter().append("g")
      .attr("class", "group");

  g.append("path")
      .style("fill", function(d) { return fill(d.index); })
      .style("stroke", function(d) { return fill(d.index); })
      .attr("d", arc);

  g.append("text")
      .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
      .attr("dy", ".35em")
      .attr("transform", function(d) {
        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
            + "translate(" + (innerRadius + 26) + ")"
            + (d.angle > Math.PI ? "rotate(180)" : "");
      })
      .style("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
      .text(function(d) { return nameByIndex.get(d.index); });

  svg.selectAll(".chord")
      .data(chord.chords)
    .enter().append("path")
      .attr("class", "chord")
      .style("stroke", function(d) { return d3.rgb(fill(d.source.index)).darker(); })
      .style("fill", function(d) { trace(d); 
      	return fill(d.source.index); })
 
      .attr("d", d3.svg.chord().radius(innerRadius));

});

d3.select(self.frameElement).style("height", outerRadius * 2 + "px");
		}															// End Chord


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/// STANDARD STUFF
/////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		firstTime=false;												// Not first time thru
		}																// End update

    </script>
  </body>
</html>
