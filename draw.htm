<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="UVALogo.ico">
	<title>SHIVA Draw</title>
	<link rel="stylesheet" type="text/css" href="css/smoothness/jquery-ui-1.8.16.custom.css">
 	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"></script>
	<script type="text/javascript" src="shivalib-min.js"></script>
 	<style type="text/css">
		body { font-family:Verdana,Geneva,sans-serif; font-size:xx-small; }
		p.pb { text-align:right; color:#999999; }
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		.propTable { background-color:#eee;border-radius:8px;
				  	 background:-moz-linear-gradient(top,#f0f0f0,#dfdfdf);
				  	 background:-webkit-linear-gradient(top, #f0f0f0 0%, #dfdfdf 100%);
				  	 border-collapse: collapse;
				  	 width:278px;
				  	 }
  </style>
</head>
<body>
	<div style="width:279px;position:absolute;top:0px;left:0px">
    <table id="propertyTable" class="propTable">
		<tr style="height:8px"><td> </td></tr>
	</table> 
		<p style="text-align:right"><img src='annotate.gif' style='vertical-align:bottom' alt='Annotate' onclick='shivaLib.Annotate(45,250)'>
		<span id='saveAsDiv'></span>
		</select> 
	</p>		
 	<div id="helpDiv"> </div>
	<div id="outputDiv" style="width:460px"> </div>
	</div>
	<div id="containerDiv" style="position:absolute;top:0px;left:308px;height:600px;width:800px"> </div>
 
<script>

///////// GLOBALS   //////////

	var shivaLib=null;
	var shivaGroup="Draw"
	
	var props={
		height: 					{	def:'600', 			opt:'number',			des:'Height of drawing'}, 
		width: 						{	def:'800', 			opt:'number',			des:'Width of drawing'}, 
		ud: 						{	def:'false', 		opt:'true|false',		des:'Enable user draw?'}
		}
	
	var helpText=new Array();
	helpText['Height of drawing']="Click on the text box to the right and enter a number that determines the height of your drawing (in pixels). Use a number 1-100000."; 
	helpText['Width of drawing']="Click on the text box to the right and enter a number that determines the width of your drawing (in pixels). Use a number 1-100000."; 
	helpText['Enable user draw?']="Use the drop-down menu to the right to toggle whether or not users can interactively draw on your visualization. Note these drawings are for users only and are not saved with the visualization. In order to draw users will need to click on the pencil icon in the bottom left of your visualization.";	
	helpText['OVERVIEW']="Draw provides a simple annotation tool, as well as a simple idea mapping ability. Those annotations can be lines, polygons, circles, boxes, text, icons, and images.<br/><br/> The lightbulb icon provides simple way to create Idea maps. Idea maps (also known as mind maps or concept maps), consist of a series of idea boxes containing text. These idea boxes can be linked with one another, with lines showing the connections between them forming tree-like hierarchies that help show processes and relationships.<br/><br/> Click <a href='https://wiki.shanti.virginia.edu/display/KB/SHIVA+Draw+Tool' target='_blank'>here</a> to view the full documentation";	helpText['OVERVIEW']="Draw provides a simple annotation tool, as well as a simple idea mapping ability. Those annotations can be lines, polygons, circles, boxes, text, icons, and images.<br/><br/> The lightbulb icon provides simple way to create Idea maps. Idea maps (also known as mind maps or concept maps), consist of a series of idea boxes containing text. These idea boxes can be linked with one another, with lines showing the connections between them forming tree-like hierarchies that help show processes and relationships.<br/><br/> Click <a href='https://wiki.shanti.virginia.edu/display/KB/SHIVA+Draw+Tool' target='_blank'>here</a> to view the full documentation";

///// INIT  /////////////
	
	$(document).ready(function() {
  		shivaLib=new SHIVA_Show("containerDiv");
		shivaLib.drupalMan=(""+window.location).match(/pr=d/);
	  	SetAttributes(props);
		ReEdit();
		ShowHelp("startup");
		if (window.addEventListener) 
			window.addEventListener("message",shivaEventHandler,false);
		else
			window.attachEvent("message",shivaEventHandler);
		if (!shivaLib.drupalMan) {
			var str="&nbsp;&nbsp;Share as: <select id='formatter' onChange='SaveData(this.value)'>";
			str+="<option>Choose format</option>";
			str+="<option>WordPress</option>";
			str+="<option>eStore</option>";
			str+="<option>iFrame</option>";
			str+="<option>JSON</option>";
			str+="<option>Web-page</option>";
			str+="</select>"; 
			$("#saveAsDiv").html(str);
			}
		shivaLib.SendReadyMessage(true);											
	});

	function shivaEventHandler(e)
	{
		if (e.data.indexOf("GetJSON") == 0) 
			e.source.postMessage("GetJSON="+SaveData("GetJSON"),"*");
		else if (e.data.indexOf("GetWebPage") == 0) 
			e.source.postMessage("GetWebPage="+SaveData("Web-page"),"*");
		else if (e.data.indexOf("GetWordPress") == 0) 
			e.source.postMessage("GetWordPress="+SaveData("WordPress"),"*");
		else if (e.data.indexOf("GetType") == 0) 
			e.source.postMessage("GetType="+shivaGroup,"*");
		else if (e.data.indexOf("PutJSON") == 0) 
			ReEdit($.parseJSON(e.data.substr(8)));
	
	}

	function Draw(mode)
	{	
		shivaLib.Draw($.parseJSON(SaveData("GetJSON")));
	}

	function SaveData(mode)
	{
		return shivaLib.SaveData(mode,shivaGroup,null,props,null);
	}	

	function ReEdit(jsonData)
	{
		shivaLib.ReEdit(jsonData,props);
		Draw();
	}	

	function ShowHelp(att)
	{
		SaveSVG();
		if (att == "startup") 
			$("#helpDiv").html("<br/><p class='pb'>Built by SHANTI<br/>The University of Virginia</p>");
		else
			shivaLib.ShowHelp(att,helpText);
	}	

	function SetAttributes()
	{
		shivaLib.SetAttributes(props);
	}	

	function trace(str) 
	{ 
		console.log(str) 
	}
	
	
function SaveSVG(h, w) 
{
	
h=600;	w=800
	var i,j,o,x,y,e;
	if (!drObj) 	return;
	var str="<svg><g transform='scale(10)'>\n";								// Header
	for (i=0;i<drObj.segs.length;++i) {										// For each seg
		o=drObj.segs[i];													// Point at it
		e=Math.max((o.edgeWidth/100).toFixed(4),.05);						// Edge is .5-10							 															
		if (o.type ==0) {													// Line
			str+="<path style='";											// Start
			if (o.color != -1)	str+=o.color+";";							// Fill color
			else				str+="none;"								// No fill
			if (o.edgeColor != -1)	 {										// If an edge
				str+="stroke:"+o.edgeColor;									// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				}
			str+="opacity:"+(o.alpha/100).toFixed(2)+"' d='";				// Alpha								
			for (j=0;j<o.x.length;++k) {
				x=(o.x[0]/h*100).toFixed(2);								// Pos x
				y=(o.y[0]/h*100).toFixed(2);								// Pos y
				}
			str+="'/>\n";													// End rect
			}
		else if (o.type == 1) {												// Box
			x=(Math.abs(o.x[1]-o.x[0])/w*100).toFixed(2);					// Calc wid
			str+="<circle r='"+x+"' ";										// Size
			x=(o.x[0]/w*100).toFixed(2);									// Pos x
			y=(o.y[0]/w*100).toFixed(2);									// Pos y
			str+="cx='"+x+"' cy='"+y+"' style='fill:";						// Pos
			if (o.color != -1)	str+=o.color+";";							// Fill color
			else				str+="none;"								// No fill
			if (o.edgeColor != -1)	 {										// If an edge
				str+="stroke:"+o.edgeColor;									// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				}
			str+="opacity:"+(o.alpha/100).toFixed(2)+"'";					// Alpha								
			str+="/>\n";													// End rect
			}
		else if (o.type == 2) {												// Box
			x=(Math.abs(o.x[1]-o.x[0])/w*100).toFixed(2);					// Calc wid
			y=(Math.abs(o.y[1]-o.y[0])/w*100).toFixed(2);					// Hgt
			str+="<rect width='"+x+"' height='"+y+"' ";						// Size
			x=(o.x[0]/w*100).toFixed(2);									// Pos x
			y=(o.y[0]/w*100).toFixed(2);									// Pos y
			str+="x='"+x+"' y='"+y+"' style='fill:";						// Pos
			if (o.color != -1)	str+=o.color+";";							// Fill color
			else				str+="none;"								// No fill
			if (o.edgeColor != -1)	 {										// If an edge
				str+="stroke:"+o.edgeColor;									// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				}
			str+="opacity:"+(o.alpha/100).toFixed(2)+"'";					// Alpha								
			if (o.curve)	str+=" rx='1' ry='1'";							// Round box
			str+="/>\n";													// End rect
			}
		else if (o.type == 3) {												// Text
			var th=(o.textSize/20).toFixed(4)-0+1;							// Text size							 															
			if (o.boxColor != -1) {											// If a box
				x=(Math.abs(o.x[1]-o.x[0])/w*100).toFixed(2);				// Calc wid
				y=(Math.abs(o.y[1]-o.y[0])/w*100).toFixed(2);				// Hgt
				str+="<rect width='"+x+"' height='"+y+"' ";					// Size
				x=(o.x[0]/w*100).toFixed(2);								// Pos x
				y=(o.y[0]/w*100).toFixed(2);								// Pos y
				str+="x='"+x+"' y='"+y+"' style='fill:"+o.boxColor;			// Pos
				str+=";opacity:"+(o.alpha/100).toFixed(2)+"'";				// Alpha								
				if (o.curve)	str+=" rx='1' ry='1'";						// Round box
				str+="/>\n";												// End rect
				}
			x=o.x[0]+10;													// Assume left
			e="start";
			if (o.textAlign == "Right")		x=o.x[1]-10,e="end";				// Right
			if (o.textAlign == "Center")	x=o.x[0]-0+Math.abs(o.x[1]-o.x[0])/2,e="middle";	// Center
			x=(x/w*100).toFixed(2);											// Pos x
			y=((o.y[0])/w*100+th+1).toFixed(2);								// Pos y
			str+="<text x='"+x+"' y='"+y+"' ";								// Text pos
			str+="style='opacity:"+(o.alpha/100).toFixed(2);				// Alpha
			str+=";text-anchor:"+e+";fill:"+o.textColor;					// Anchor / color
			str+=";font-family:sans-serif;font-size:"+th+"'>";				// Style							
			str+=o.text;													// String
			str+="</text>\n";												// End text
			}
		else if (o.type == 4) {												// Image
			x=(Math.abs(o.x[1]-o.x[0])/w*100).toFixed(2);					// Calc wid
			y=(Math.abs(o.y[1]-o.y[0])/w*100).toFixed(2);					// Hgt
			str+="<image width='"+x+"' height='"+y+"' ";					// Size
			x=(o.x[0]/w*100).toFixed(2);									// Pos x
			y=(o.y[0]/w*100).toFixed(2);									// Pos y
			str+="x='"+x+"' y='"+y+"' style='";								// Pos
			str+="opacity:"+(o.alpha/100).toFixed(2)+"'";					// Alpha								
			str+=" xlink:href='"+o.imageURL+"'";							// Round box
			str+="/>\n";													// End image
			if (o.edgeColor != -1) {										// If a box
				x=(Math.abs(o.x[1]-o.x[0])/w*100).toFixed(2);				// Calc wid
				y=(Math.abs(o.y[1]-o.y[0])/w*100).toFixed(2);				// Hgt
				str+="<rect width='"+x+"' height='"+y+"' ";					// Size
				x=(o.x[0]/w*100).toFixed(2);								// Pos x
				y=(o.y[0]/w*100).toFixed(2);								// Pos y
				str+="x='"+x+"' y='"+y+"' style='";							// Pos
				str+="fill:none;stroke:"+o.edgeColor;						// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				str+=";opacity:"+(o.alpha/100).toFixed(2)+"'";				// Alpha								
				str+="/>\n";												// End rect
				}
			}
		}
	str+="</g></svg>";														// Close svg
	trace(str)
}
	
	
	

	

</script>
</body></html>